import HE.Paillier;

import java.math.BigInteger;
import java.util.concurrent.CompletableFuture;

import static java.lang.Math.exp;
import static java.lang.Math.pow;
import static java.lang.Math.random;

public class DataPacking {
    private static int oriH, oriW, packedH, packedW, round, ksize;
    private static long startTime, endTime;
    private static String step;
    public static Paillier pp;
    private static BigInteger[][] initialImg(int stp, int oH, int oW, int pH, int pW) throws Exception {
        oriH = oH; oriW = oW; packedH = pH; packedW = pW;
        step = String.valueOf(stp);
        pp = new Paillier(1024);
        BigInteger img[][] = new BigInteger[oriH][oriW];
        /*
        System.out.println("{");
        for (int ctr = 0; ctr < 20; ctr++) {
            System.out.print("{");
            for (int itr = 0; itr < 20; itr++)
                System.out.print(((int)(random() * 255)) + ", ");
            System.out.println("},");
        }
        System.out.println("};");
        */
        int tt[][] = new int[][] {
                {89, 96, 3, 198, 115, 37, 96, 118, },
                {162, 211, 86, 226, 213, 70, 13, 44, },
                {182, 36, 7, 144, 164, 71, 43, 161, },
                {115, 223, 54, 173, 254, 218, 144, 172, },
                {249, 2, 26, 206, 109, 14, 45, 191, },
                {237, 152, 168, 34, 136, 247, 156, 79, },
                {3, 108, 234, 83, 50, 195, 229, 79, },
                {198, 96, 194, 202, 42, 240, 149, 85, },
        };
        for (int ctr = 0; ctr < oriH; ctr++)
            for (int itr = 0; itr < oriW; itr++)
                img[ctr][itr] = new BigInteger(String.valueOf(tt[ctr][itr]));
        return img;
    }
    public static BigInteger[][] initialImgPro(int stp, int oH, int oW, int pH, int pW) throws Exception {
        oriH = oH; oriW = oW; packedH = pH; packedW = pW;
        System.out.println("matrix size: " + oH + " * " + oW);
        System.out.println("packed into: " + pH + " * " + pW);
        round = 1;
        startTime=System.currentTimeMillis();
        step = String.valueOf(stp);
        pp = new Paillier(ksize);
        System.out.println("ksize: " + ksize);
        BigInteger img[][] = new BigInteger[oriH][oriW];
        /*
        System.out.println("{");
        for (int ctr = 0; ctr < 64; ctr++) {
            System.out.print("{");
            for (int itr = 0; itr < 64; itr++)
                System.out.print(((int)(random() * 255)) + ", ");
            System.out.println("},");
        }
        System.out.println("};");*/
        int tt[][] = new int[][]
                {
                        {65, 54, 19, 29, 72, 159, 150, 193, 109, 203, 87, 5, 44, 202, 66, 173, 59, 34, 59, 56, 81, 95, 49, 25, 240, 89, 144, 199, 16, 178, 201, 142, 171, 70, 123, 58, 60, 90, 56, 124, 23, 25, 148, 64, 126, 53, 120, 52, 4, 151, 33, 155, 110, 161, 76, 189, 246, 235, 112, 98, 41, 95, 177, 108, },
                        {4, 21, 98, 24, 94, 235, 165, 44, 160, 100, 161, 82, 29, 80, 64, 241, 67, 182, 56, 219, 205, 180, 114, 226, 236, 61, 93, 136, 30, 52, 251, 251, 249, 12, 192, 58, 225, 180, 91, 81, 213, 200, 167, 187, 21, 215, 206, 76, 118, 30, 159, 116, 141, 49, 172, 96, 177, 227, 164, 34, 18, 91, 161, 34, },
                        {204, 16, 232, 13, 204, 173, 165, 206, 236, 226, 184, 119, 103, 131, 171, 149, 52, 243, 15, 38, 58, 126, 104, 57, 184, 246, 230, 84, 89, 35, 168, 231, 164, 106, 84, 109, 119, 176, 23, 77, 43, 151, 244, 81, 220, 39, 115, 64, 31, 114, 68, 22, 234, 208, 140, 166, 86, 100, 217, 117, 242, 191, 134, 77, },
                        {48, 251, 175, 98, 82, 22, 65, 227, 213, 9, 230, 118, 22, 28, 224, 94, 37, 183, 175, 49, 168, 92, 209, 92, 75, 149, 69, 61, 56, 84, 204, 99, 123, 163, 45, 38, 229, 136, 169, 8, 90, 219, 37, 68, 224, 225, 18, 89, 251, 208, 105, 205, 14, 195, 88, 24, 142, 70, 68, 53, 209, 58, 9, 166, },
                        {18, 237, 19, 96, 26, 23, 2, 177, 187, 172, 45, 93, 205, 7, 19, 230, 216, 7, 89, 135, 48, 217, 129, 100, 87, 165, 193, 106, 233, 126, 245, 153, 84, 6, 138, 175, 183, 141, 161, 194, 60, 211, 135, 245, 252, 77, 162, 74, 108, 112, 173, 106, 187, 137, 6, 168, 108, 177, 58, 95, 158, 174, 217, 154, },
                        {20, 222, 175, 96, 42, 8, 54, 182, 71, 93, 36, 107, 58, 15, 58, 196, 35, 183, 132, 73, 93, 20, 76, 109, 172, 214, 185, 60, 185, 218, 50, 0, 112, 159, 222, 118, 133, 203, 197, 133, 160, 74, 250, 15, 71, 225, 85, 87, 151, 45, 221, 103, 96, 133, 1, 228, 218, 202, 27, 67, 157, 218, 153, 111, },
                        {243, 85, 72, 236, 198, 85, 217, 208, 205, 13, 234, 58, 116, 129, 247, 179, 86, 21, 202, 86, 148, 100, 236, 186, 166, 168, 137, 123, 124, 212, 239, 119, 233, 219, 185, 49, 91, 179, 254, 76, 189, 68, 216, 162, 115, 239, 118, 124, 210, 48, 218, 20, 115, 173, 14, 20, 252, 82, 58, 168, 202, 1, 193, 108, },
                        {253, 14, 176, 238, 222, 30, 123, 102, 186, 186, 13, 229, 105, 220, 127, 186, 167, 140, 205, 115, 126, 4, 236, 225, 142, 11, 113, 120, 244, 175, 236, 121, 22, 50, 169, 6, 34, 194, 66, 48, 145, 162, 213, 94, 65, 74, 91, 150, 12, 146, 129, 183, 230, 43, 54, 99, 157, 85, 192, 245, 75, 142, 140, 4, },
                        {109, 164, 176, 212, 110, 228, 44, 139, 251, 21, 103, 51, 67, 114, 126, 84, 150, 82, 32, 119, 108, 182, 143, 242, 8, 15, 130, 57, 61, 44, 26, 61, 239, 201, 44, 178, 6, 42, 112, 141, 78, 204, 243, 170, 225, 236, 70, 138, 48, 13, 147, 190, 134, 6, 175, 14, 147, 207, 157, 90, 200, 193, 219, 253, },
                        {214, 56, 240, 184, 234, 52, 92, 46, 97, 39, 20, 185, 210, 17, 7, 155, 87, 10, 47, 111, 192, 116, 181, 158, 119, 134, 129, 160, 46, 50, 133, 224, 128, 38, 141, 185, 222, 117, 72, 43, 190, 91, 95, 214, 94, 161, 79, 110, 148, 153, 161, 224, 102, 205, 192, 132, 41, 86, 103, 244, 227, 86, 34, 152, },
                        {145, 23, 222, 139, 169, 70, 207, 56, 11, 253, 81, 10, 244, 172, 114, 106, 57, 110, 38, 196, 91, 11, 198, 94, 104, 178, 208, 147, 200, 122, 62, 142, 71, 201, 215, 131, 153, 56, 72, 99, 178, 186, 97, 64, 0, 177, 77, 174, 92, 31, 238, 70, 72, 63, 171, 147, 134, 190, 71, 252, 152, 42, 74, 182, },
                        {30, 100, 152, 57, 72, 173, 122, 191, 209, 82, 104, 215, 249, 7, 78, 138, 16, 251, 218, 106, 249, 207, 154, 157, 246, 232, 90, 37, 156, 50, 68, 170, 160, 226, 183, 137, 158, 174, 151, 77, 99, 215, 62, 121, 187, 129, 189, 58, 227, 23, 93, 180, 5, 235, 152, 143, 23, 199, 223, 232, 163, 231, 159, 4, },
                        {141, 193, 211, 211, 21, 252, 113, 37, 169, 46, 151, 32, 18, 85, 66, 218, 154, 149, 179, 3, 167, 63, 96, 224, 58, 58, 115, 187, 47, 169, 105, 244, 45, 239, 98, 127, 58, 107, 239, 224, 219, 197, 37, 115, 148, 65, 171, 168, 39, 55, 81, 179, 240, 229, 120, 120, 244, 192, 53, 152, 237, 170, 180, 33, },
                        {237, 245, 193, 186, 116, 111, 204, 68, 16, 151, 246, 82, 177, 237, 247, 117, 233, 44, 143, 4, 32, 167, 135, 239, 167, 29, 201, 55, 103, 244, 61, 181, 62, 105, 130, 122, 5, 250, 131, 36, 100, 102, 21, 166, 8, 148, 154, 97, 41, 26, 157, 181, 73, 100, 239, 36, 76, 48, 150, 121, 243, 171, 78, 198, },
                        {169, 150, 252, 191, 77, 143, 145, 149, 110, 55, 101, 119, 247, 230, 3, 214, 204, 108, 175, 230, 57, 210, 164, 249, 125, 21, 70, 31, 239, 151, 240, 226, 54, 107, 28, 22, 77, 145, 229, 80, 227, 18, 195, 56, 117, 51, 104, 194, 92, 227, 106, 64, 150, 109, 64, 103, 198, 127, 132, 179, 45, 229, 72, 240, },
                        {249, 172, 110, 85, 109, 224, 156, 92, 133, 254, 106, 90, 29, 200, 202, 12, 53, 95, 154, 73, 74, 172, 93, 192, 43, 89, 250, 195, 165, 48, 68, 71, 249, 89, 118, 161, 122, 171, 244, 247, 78, 65, 135, 33, 132, 155, 62, 78, 11, 237, 27, 20, 27, 123, 44, 59, 242, 159, 151, 76, 114, 191, 127, 7, },
                        {69, 96, 54, 175, 241, 134, 134, 198, 215, 213, 35, 175, 210, 45, 111, 210, 158, 23, 12, 24, 150, 234, 77, 189, 183, 126, 5, 108, 250, 22, 107, 175, 80, 136, 3, 68, 122, 189, 189, 52, 11, 48, 61, 91, 142, 176, 111, 203, 189, 108, 57, 85, 52, 42, 227, 228, 173, 178, 109, 84, 106, 177, 182, 1, },
                        {142, 160, 146, 242, 176, 237, 141, 31, 9, 58, 41, 62, 178, 109, 180, 200, 122, 84, 212, 182, 178, 182, 239, 79, 45, 31, 120, 121, 98, 14, 245, 13, 80, 233, 72, 36, 37, 213, 105, 197, 89, 140, 50, 7, 4, 105, 103, 116, 168, 24, 90, 176, 196, 215, 231, 34, 131, 178, 139, 8, 237, 240, 133, 147, },
                        {217, 200, 199, 84, 160, 112, 124, 235, 80, 240, 119, 8, 160, 71, 230, 140, 149, 49, 200, 40, 236, 80, 137, 216, 250, 127, 71, 145, 180, 232, 183, 157, 195, 173, 196, 147, 168, 71, 32, 68, 189, 26, 13, 142, 215, 116, 144, 26, 10, 212, 10, 137, 161, 83, 247, 74, 36, 28, 72, 254, 110, 22, 56, 83, },
                        {146, 72, 12, 74, 64, 5, 148, 28, 215, 166, 87, 111, 57, 134, 198, 235, 126, 197, 164, 54, 179, 188, 12, 242, 99, 59, 40, 196, 152, 46, 177, 25, 147, 239, 218, 53, 237, 80, 244, 65, 101, 89, 177, 214, 231, 227, 58, 79, 155, 90, 173, 28, 240, 129, 242, 126, 189, 145, 182, 80, 100, 195, 187, 225, },
                        {247, 80, 104, 172, 251, 220, 115, 46, 42, 155, 69, 96, 49, 169, 109, 8, 240, 210, 244, 154, 4, 107, 1, 142, 223, 233, 128, 186, 237, 198, 249, 210, 47, 92, 183, 34, 1, 196, 202, 113, 144, 53, 46, 96, 95, 207, 129, 141, 244, 220, 115, 166, 154, 6, 199, 200, 110, 136, 136, 185, 175, 80, 135, 18, },
                        {131, 116, 167, 226, 156, 24, 251, 88, 152, 76, 215, 122, 199, 143, 56, 126, 60, 104, 253, 37, 200, 219, 112, 28, 139, 198, 75, 210, 52, 160, 159, 229, 242, 217, 61, 23, 125, 180, 64, 214, 251, 162, 158, 113, 37, 5, 61, 96, 246, 177, 51, 146, 170, 231, 83, 76, 167, 238, 251, 201, 7, 108, 129, 15, },
                        {77, 86, 57, 7, 165, 96, 65, 176, 161, 21, 171, 54, 37, 26, 173, 145, 170, 143, 168, 226, 73, 74, 204, 184, 137, 90, 3, 84, 237, 91, 153, 93, 143, 48, 228, 152, 238, 20, 146, 227, 67, 82, 24, 62, 64, 166, 222, 138, 47, 253, 92, 159, 188, 64, 83, 104, 153, 209, 190, 8, 88, 206, 231, 139, },
                        {122, 79, 30, 18, 200, 155, 103, 82, 91, 222, 72, 14, 200, 216, 101, 80, 232, 238, 99, 75, 142, 84, 211, 80, 109, 35, 132, 143, 18, 233, 168, 88, 116, 177, 172, 28, 63, 99, 137, 169, 79, 79, 143, 17, 66, 216, 95, 48, 69, 86, 216, 5, 96, 218, 68, 224, 149, 8, 219, 25, 55, 213, 58, 223, },
                        {158, 21, 203, 1, 65, 143, 145, 139, 218, 197, 10, 166, 238, 176, 244, 188, 115, 118, 14, 99, 202, 160, 124, 202, 163, 59, 253, 9, 106, 67, 68, 52, 54, 226, 253, 49, 29, 85, 94, 249, 186, 174, 192, 116, 170, 108, 39, 253, 96, 109, 248, 156, 132, 227, 79, 9, 123, 217, 154, 235, 66, 52, 32, 56, },
                        {41, 97, 24, 254, 72, 137, 201, 254, 154, 190, 6, 246, 246, 132, 208, 245, 244, 5, 226, 228, 195, 136, 222, 45, 217, 1, 209, 163, 1, 1, 126, 183, 246, 31, 147, 165, 96, 123, 163, 147, 59, 50, 23, 85, 84, 128, 243, 80, 141, 186, 88, 14, 222, 140, 51, 230, 33, 167, 114, 222, 136, 154, 80, 189, },
                        {201, 158, 29, 137, 114, 7, 228, 207, 227, 67, 248, 111, 208, 219, 58, 97, 182, 17, 90, 107, 55, 191, 23, 203, 101, 191, 127, 196, 137, 16, 237, 52, 207, 71, 100, 180, 120, 233, 44, 73, 9, 241, 152, 48, 219, 45, 193, 92, 42, 29, 200, 240, 82, 181, 40, 97, 181, 145, 231, 231, 247, 88, 124, 183, },
                        {217, 140, 40, 156, 32, 92, 111, 200, 56, 245, 42, 33, 93, 138, 33, 206, 6, 82, 23, 151, 71, 253, 50, 104, 170, 88, 140, 123, 193, 81, 150, 180, 53, 98, 137, 37, 206, 225, 246, 40, 70, 6, 199, 56, 5, 45, 178, 87, 76, 140, 56, 250, 88, 149, 199, 98, 47, 33, 123, 190, 190, 11, 51, 187, },
                        {197, 228, 152, 218, 223, 97, 145, 131, 181, 77, 83, 234, 222, 90, 21, 162, 154, 101, 205, 59, 221, 161, 22, 94, 138, 230, 110, 175, 227, 71, 206, 33, 98, 75, 38, 123, 48, 120, 16, 159, 103, 46, 144, 125, 38, 132, 247, 160, 40, 184, 153, 34, 102, 96, 250, 0, 175, 240, 142, 254, 183, 66, 206, 207, },
                        {113, 13, 207, 176, 216, 20, 248, 147, 130, 58, 138, 152, 90, 179, 35, 254, 0, 120, 42, 125, 25, 94, 99, 203, 195, 110, 110, 64, 6, 184, 43, 104, 192, 86, 82, 25, 55, 63, 129, 174, 157, 117, 46, 22, 141, 39, 184, 228, 122, 182, 204, 199, 91, 239, 219, 170, 237, 85, 77, 88, 207, 42, 86, 148, },
                        {163, 178, 21, 129, 49, 65, 193, 167, 48, 207, 44, 21, 0, 64, 196, 233, 251, 242, 185, 4, 176, 223, 104, 184, 94, 124, 148, 51, 132, 95, 99, 166, 77, 249, 254, 108, 178, 234, 50, 2, 58, 224, 21, 71, 235, 163, 250, 77, 237, 167, 134, 225, 224, 109, 158, 75, 156, 0, 149, 176, 112, 48, 109, 110, },
                        {108, 124, 126, 205, 119, 49, 92, 184, 44, 235, 188, 136, 153, 156, 198, 115, 250, 24, 210, 29, 92, 118, 252, 60, 17, 212, 141, 216, 110, 136, 61, 81, 5, 116, 224, 17, 12, 253, 213, 39, 25, 19, 214, 169, 184, 199, 138, 158, 135, 94, 56, 32, 218, 246, 125, 114, 210, 173, 221, 77, 226, 173, 51, 168, },
                        {141, 173, 216, 89, 13, 73, 118, 48, 30, 222, 214, 135, 234, 244, 46, 228, 113, 181, 122, 227, 65, 185, 115, 169, 175, 22, 148, 247, 230, 194, 111, 88, 73, 119, 86, 254, 176, 109, 207, 171, 12, 244, 15, 86, 158, 76, 224, 107, 9, 11, 247, 20, 198, 76, 156, 126, 118, 204, 33, 252, 191, 143, 52, 166, },
                        {225, 206, 143, 86, 135, 186, 227, 12, 85, 22, 16, 57, 29, 181, 35, 223, 75, 200, 83, 108, 83, 54, 125, 179, 137, 101, 91, 238, 144, 132, 144, 86, 71, 205, 83, 171, 124, 76, 28, 73, 59, 94, 72, 12, 224, 122, 15, 50, 94, 225, 104, 92, 42, 110, 243, 193, 159, 35, 191, 61, 79, 254, 73, 1, },
                        {198, 87, 150, 138, 30, 34, 132, 11, 49, 191, 226, 124, 39, 47, 217, 140, 76, 37, 123, 232, 195, 16, 18, 152, 216, 21, 239, 228, 245, 208, 250, 175, 102, 4, 67, 57, 29, 112, 59, 15, 146, 190, 229, 86, 195, 213, 162, 141, 0, 194, 162, 201, 249, 79, 53, 173, 4, 117, 112, 100, 246, 6, 133, 181, },
                        {129, 83, 77, 123, 17, 56, 47, 212, 134, 114, 148, 21, 53, 66, 117, 190, 126, 31, 124, 209, 99, 175, 90, 69, 42, 73, 167, 233, 239, 228, 178, 196, 165, 17, 246, 150, 124, 27, 19, 133, 43, 193, 10, 182, 244, 192, 146, 84, 97, 222, 26, 136, 254, 119, 182, 247, 93, 53, 33, 198, 157, 58, 27, 76, },
                        {170, 12, 108, 144, 15, 115, 150, 29, 7, 220, 30, 204, 15, 254, 246, 31, 149, 50, 49, 16, 14, 103, 147, 129, 191, 164, 6, 33, 15, 218, 82, 15, 15, 252, 136, 175, 41, 165, 221, 215, 174, 252, 126, 205, 241, 42, 34, 201, 83, 101, 137, 69, 64, 172, 91, 196, 209, 33, 225, 227, 23, 103, 71, 253, },
                        {148, 179, 235, 63, 160, 181, 52, 210, 174, 98, 21, 163, 131, 88, 30, 82, 90, 171, 173, 33, 18, 26, 252, 23, 252, 239, 161, 237, 3, 85, 240, 81, 24, 136, 70, 142, 190, 32, 12, 254, 191, 146, 158, 129, 114, 46, 201, 192, 110, 42, 214, 90, 109, 154, 119, 204, 93, 241, 206, 136, 137, 49, 51, 224, },
                        {176, 5, 232, 50, 140, 236, 46, 66, 38, 206, 145, 240, 204, 195, 88, 34, 17, 76, 35, 69, 149, 231, 187, 249, 206, 189, 18, 19, 2, 37, 9, 188, 10, 214, 150, 134, 75, 4, 51, 229, 101, 218, 59, 37, 206, 197, 34, 193, 123, 74, 253, 245, 66, 124, 187, 133, 55, 1, 242, 249, 213, 190, 228, 11, },
                        {252, 245, 144, 113, 66, 194, 62, 63, 43, 243, 26, 141, 250, 226, 163, 163, 222, 247, 208, 160, 5, 206, 196, 108, 18, 24, 210, 225, 50, 242, 97, 25, 109, 23, 229, 94, 185, 210, 239, 148, 115, 16, 133, 163, 104, 105, 202, 57, 218, 214, 244, 60, 238, 194, 26, 76, 60, 239, 51, 31, 254, 100, 32, 189, },
                        {102, 85, 5, 136, 66, 62, 158, 76, 251, 90, 134, 254, 91, 47, 121, 97, 57, 90, 226, 101, 114, 92, 197, 45, 253, 35, 46, 95, 15, 230, 245, 234, 113, 37, 137, 115, 56, 197, 207, 84, 234, 239, 248, 164, 19, 185, 79, 155, 234, 126, 155, 122, 132, 186, 178, 138, 85, 83, 57, 163, 149, 72, 80, 141, },
                        {54, 123, 75, 177, 133, 113, 236, 198, 188, 224, 234, 153, 224, 158, 178, 131, 68, 140, 95, 1, 5, 75, 8, 155, 134, 201, 35, 107, 213, 80, 221, 159, 81, 60, 171, 226, 162, 110, 59, 217, 108, 104, 61, 181, 121, 43, 19, 138, 116, 49, 152, 69, 90, 60, 183, 221, 223, 84, 85, 39, 26, 11, 116, 135, },
                        {116, 235, 42, 249, 224, 28, 20, 7, 224, 108, 128, 174, 137, 74, 117, 242, 68, 193, 14, 60, 92, 51, 95, 222, 203, 98, 80, 234, 230, 76, 54, 175, 189, 149, 46, 182, 231, 102, 91, 112, 152, 61, 21, 113, 136, 169, 56, 4, 14, 204, 76, 163, 115, 71, 87, 68, 22, 96, 108, 94, 107, 115, 0, 94, },
                        {85, 0, 26, 110, 119, 88, 53, 143, 145, 140, 139, 174, 202, 28, 26, 136, 252, 233, 94, 102, 250, 46, 14, 19, 124, 88, 215, 237, 55, 113, 7, 206, 70, 21, 152, 7, 113, 241, 1, 28, 122, 176, 65, 171, 213, 66, 133, 133, 133, 194, 178, 58, 233, 183, 160, 62, 117, 204, 217, 62, 42, 16, 200, 139, },
                        {156, 144, 43, 61, 24, 62, 141, 51, 23, 33, 66, 85, 244, 110, 19, 49, 33, 96, 81, 129, 174, 127, 174, 106, 64, 212, 76, 216, 172, 115, 45, 10, 190, 239, 251, 36, 144, 167, 145, 195, 241, 46, 105, 145, 9, 202, 82, 50, 73, 188, 74, 110, 86, 227, 113, 250, 43, 126, 94, 36, 32, 227, 237, 126, },
                        {8, 155, 233, 229, 170, 143, 97, 56, 64, 7, 186, 208, 159, 189, 210, 20, 179, 141, 97, 99, 242, 60, 24, 89, 33, 100, 147, 140, 145, 206, 65, 248, 168, 86, 219, 194, 222, 30, 232, 92, 22, 237, 7, 218, 66, 141, 105, 2, 206, 77, 1, 146, 56, 74, 88, 127, 117, 146, 2, 252, 173, 14, 189, 189, },
                        {184, 234, 75, 88, 151, 93, 223, 136, 201, 187, 202, 231, 13, 72, 184, 190, 119, 145, 103, 224, 99, 244, 75, 190, 238, 160, 210, 140, 243, 110, 129, 222, 155, 24, 23, 29, 172, 140, 69, 12, 163, 157, 75, 234, 129, 232, 246, 225, 249, 143, 24, 9, 91, 55, 129, 205, 18, 11, 0, 111, 43, 112, 157, 20, },
                        {150, 191, 145, 37, 47, 178, 17, 211, 199, 11, 246, 37, 151, 187, 245, 75, 77, 237, 136, 247, 24, 91, 89, 11, 171, 214, 85, 42, 18, 83, 182, 214, 173, 81, 207, 32, 101, 120, 47, 85, 97, 11, 6, 249, 18, 1, 107, 224, 137, 209, 15, 114, 66, 107, 153, 13, 160, 108, 172, 0, 86, 87, 243, 183, },
                        {189, 121, 57, 159, 18, 57, 181, 184, 13, 174, 86, 250, 20, 216, 117, 134, 167, 42, 23, 242, 23, 234, 70, 103, 241, 179, 114, 168, 193, 65, 32, 250, 216, 14, 83, 145, 246, 90, 94, 62, 133, 203, 143, 64, 239, 97, 102, 86, 121, 64, 137, 206, 141, 200, 186, 179, 15, 113, 95, 60, 181, 34, 18, 111, },
                        {224, 59, 216, 9, 152, 225, 57, 237, 144, 254, 124, 239, 61, 31, 197, 27, 231, 127, 128, 148, 183, 148, 250, 220, 92, 229, 121, 104, 214, 94, 87, 137, 101, 243, 0, 56, 63, 72, 166, 120, 38, 226, 175, 26, 45, 165, 156, 10, 108, 137, 55, 173, 100, 245, 81, 170, 1, 169, 86, 224, 5, 237, 22, 188, },
                        {183, 152, 17, 183, 60, 144, 142, 105, 219, 148, 95, 194, 27, 115, 252, 184, 204, 124, 51, 63, 9, 95, 35, 130, 238, 202, 150, 14, 140, 227, 59, 18, 80, 234, 48, 3, 108, 156, 217, 137, 150, 105, 135, 53, 96, 35, 196, 91, 22, 135, 188, 77, 219, 6, 6, 122, 51, 40, 165, 2, 154, 55, 216, 5, },
                        {97, 55, 112, 61, 251, 191, 36, 137, 109, 243, 67, 148, 106, 198, 167, 57, 216, 176, 133, 26, 63, 22, 28, 155, 124, 18, 187, 168, 237, 192, 214, 152, 182, 196, 33, 50, 105, 155, 182, 238, 216, 57, 116, 176, 9, 146, 118, 106, 162, 232, 157, 200, 94, 38, 165, 112, 232, 38, 25, 55, 205, 135, 209, 182, },
                        {206, 126, 93, 146, 201, 42, 191, 58, 32, 52, 157, 17, 5, 191, 167, 205, 186, 84, 158, 61, 23, 238, 218, 200, 18, 106, 136, 221, 60, 66, 73, 192, 55, 228, 218, 126, 71, 31, 201, 79, 254, 143, 0, 76, 244, 179, 28, 66, 28, 215, 31, 62, 22, 62, 4, 199, 83, 175, 29, 186, 101, 29, 2, 114, },
                        {42, 56, 250, 61, 237, 114, 112, 33, 151, 166, 1, 149, 75, 98, 38, 33, 177, 235, 95, 213, 63, 48, 209, 41, 92, 39, 50, 12, 87, 191, 174, 243, 99, 231, 23, 67, 162, 62, 91, 152, 151, 188, 192, 142, 173, 246, 211, 249, 211, 162, 55, 245, 80, 158, 237, 207, 246, 72, 169, 155, 245, 144, 217, 53, },
                        {64, 62, 20, 117, 112, 204, 114, 192, 166, 127, 3, 88, 135, 183, 115, 133, 252, 247, 71, 83, 192, 219, 219, 136, 18, 230, 109, 119, 40, 60, 8, 137, 28, 77, 45, 163, 9, 242, 85, 46, 18, 195, 70, 232, 220, 40, 91, 228, 204, 96, 107, 139, 234, 163, 8, 23, 19, 148, 41, 221, 83, 122, 35, 124, },
                        {231, 30, 4, 82, 132, 162, 20, 165, 181, 126, 40, 147, 93, 117, 242, 23, 60, 149, 98, 135, 104, 85, 36, 128, 89, 61, 82, 112, 6, 19, 32, 239, 6, 28, 243, 179, 104, 195, 40, 13, 41, 9, 0, 228, 181, 19, 246, 180, 31, 160, 194, 23, 185, 99, 186, 145, 15, 2, 94, 165, 241, 35, 230, 113, },
                        {103, 195, 154, 239, 233, 66, 165, 138, 42, 149, 195, 170, 41, 167, 3, 231, 219, 43, 42, 214, 41, 11, 11, 167, 49, 91, 72, 122, 28, 161, 120, 212, 229, 143, 174, 160, 112, 107, 184, 246, 74, 245, 35, 74, 92, 45, 88, 164, 101, 11, 167, 80, 237, 77, 27, 189, 219, 111, 77, 97, 82, 36, 86, 15, },
                        {224, 35, 8, 150, 89, 125, 89, 128, 211, 144, 232, 81, 110, 87, 227, 37, 122, 14, 113, 91, 140, 30, 18, 178, 215, 181, 236, 117, 218, 231, 45, 75, 19, 186, 243, 215, 251, 128, 67, 152, 252, 163, 151, 69, 76, 59, 135, 159, 30, 11, 207, 189, 126, 219, 207, 211, 97, 209, 38, 236, 105, 18, 181, 74, },
                        {181, 216, 193, 227, 235, 89, 47, 26, 77, 189, 77, 183, 63, 50, 159, 65, 84, 44, 78, 14, 19, 7, 192, 162, 55, 175, 249, 197, 83, 56, 224, 244, 213, 51, 148, 49, 125, 31, 70, 179, 75, 129, 219, 145, 196, 253, 202, 104, 27, 122, 41, 212, 145, 52, 250, 229, 225, 225, 41, 188, 4, 36, 62, 59, },
                        {241, 220, 110, 242, 132, 177, 220, 144, 105, 152, 49, 173, 159, 51, 242, 28, 168, 177, 252, 237, 159, 66, 143, 232, 70, 63, 49, 122, 170, 218, 161, 42, 214, 184, 132, 21, 95, 141, 105, 67, 44, 252, 237, 160, 44, 214, 144, 196, 226, 68, 185, 41, 225, 210, 36, 13, 102, 191, 144, 6, 52, 223, 11, 70, },
                        {181, 33, 200, 129, 51, 226, 183, 236, 153, 109, 75, 206, 242, 74, 53, 41, 33, 178, 203, 44, 224, 248, 204, 143, 118, 152, 65, 119, 121, 184, 207, 34, 131, 218, 192, 162, 114, 232, 101, 166, 228, 45, 53, 191, 124, 109, 83, 160, 30, 17, 144, 144, 42, 51, 29, 144, 34, 155, 121, 228, 182, 184, 254, 61, },
                        {149, 62, 141, 30, 160, 114, 149, 46, 86, 2, 171, 168, 97, 5, 65, 150, 59, 213, 1, 76, 181, 161, 133, 98, 27, 210, 172, 155, 58, 0, 10, 25, 120, 165, 60, 221, 84, 198, 235, 200, 121, 115, 101, 68, 164, 94, 132, 57, 248, 234, 166, 75, 137, 118, 232, 12, 223, 95, 201, 134, 92, 194, 173, 146, },
                        {13, 27, 91, 73, 120, 180, 190, 115, 133, 66, 167, 224, 63, 55, 88, 122, 177, 244, 197, 85, 152, 176, 112, 24, 204, 147, 183, 234, 173, 206, 20, 123, 227, 69, 194, 207, 211, 228, 145, 72, 13, 43, 109, 176, 247, 222, 116, 67, 148, 231, 204, 44, 236, 12, 168, 153, 99, 85, 25, 79, 110, 81, 67, 118, },
                        {219, 147, 165, 161, 201, 118, 203, 38, 228, 225, 192, 96, 118, 159, 19, 243, 225, 205, 9, 240, 6, 59, 210, 119, 214, 180, 72, 180, 65, 218, 188, 11, 246, 174, 226, 181, 94, 202, 177, 157, 80, 77, 91, 223, 146, 98, 58, 22, 101, 213, 142, 193, 122, 89, 127, 245, 214, 207, 153, 4, 28, 165, 107, 5, }
                };
        for (int ctr = 0; ctr < oriH; ctr++)
            for (int itr = 0; itr < oriW; itr++)
                img[ctr][itr] = pp.encrypt(new BigInteger(String.valueOf(tt[ctr][itr])));
        return img;
    }

    private static BigInteger[][] initialImgNor(int oH, int oW) throws Exception {
        oriH = oH; oriW = oW;
        System.out.println("matrix size: " + oH + " * " + oW);
        round = 1;
        startTime=System.currentTimeMillis();
        pp = new Paillier(ksize);
        System.out.println("ksize: " + ksize);
        BigInteger img[][] = new BigInteger[oriH][oriW];
        System.out.println("{");
        /*
        for (int ctr = 0; ctr < 64; ctr++) {
            System.out.print("{");
            for (int itr = 0; itr < 64; itr++)
                System.out.print(((int)(random() * 255)) + ", ");
            System.out.println("},");
        }

        System.out.println("};");*/
        int tt[][] = new int[][]
                {
                        {65, 54, 19, 29, 72, 159, 150, 193, 109, 203, 87, 5, 44, 202, 66, 173, 59, 34, 59, 56, 81, 95, 49, 25, 240, 89, 144, 199, 16, 178, 201, 142, 171, 70, 123, 58, 60, 90, 56, 124, 23, 25, 148, 64, 126, 53, 120, 52, 4, 151, 33, 155, 110, 161, 76, 189, 246, 235, 112, 98, 41, 95, 177, 108, },
                        {4, 21, 98, 24, 94, 235, 165, 44, 160, 100, 161, 82, 29, 80, 64, 241, 67, 182, 56, 219, 205, 180, 114, 226, 236, 61, 93, 136, 30, 52, 251, 251, 249, 12, 192, 58, 225, 180, 91, 81, 213, 200, 167, 187, 21, 215, 206, 76, 118, 30, 159, 116, 141, 49, 172, 96, 177, 227, 164, 34, 18, 91, 161, 34, },
                        {204, 16, 232, 13, 204, 173, 165, 206, 236, 226, 184, 119, 103, 131, 171, 149, 52, 243, 15, 38, 58, 126, 104, 57, 184, 246, 230, 84, 89, 35, 168, 231, 164, 106, 84, 109, 119, 176, 23, 77, 43, 151, 244, 81, 220, 39, 115, 64, 31, 114, 68, 22, 234, 208, 140, 166, 86, 100, 217, 117, 242, 191, 134, 77, },
                        {48, 251, 175, 98, 82, 22, 65, 227, 213, 9, 230, 118, 22, 28, 224, 94, 37, 183, 175, 49, 168, 92, 209, 92, 75, 149, 69, 61, 56, 84, 204, 99, 123, 163, 45, 38, 229, 136, 169, 8, 90, 219, 37, 68, 224, 225, 18, 89, 251, 208, 105, 205, 14, 195, 88, 24, 142, 70, 68, 53, 209, 58, 9, 166, },
                        {18, 237, 19, 96, 26, 23, 2, 177, 187, 172, 45, 93, 205, 7, 19, 230, 216, 7, 89, 135, 48, 217, 129, 100, 87, 165, 193, 106, 233, 126, 245, 153, 84, 6, 138, 175, 183, 141, 161, 194, 60, 211, 135, 245, 252, 77, 162, 74, 108, 112, 173, 106, 187, 137, 6, 168, 108, 177, 58, 95, 158, 174, 217, 154, },
                        {20, 222, 175, 96, 42, 8, 54, 182, 71, 93, 36, 107, 58, 15, 58, 196, 35, 183, 132, 73, 93, 20, 76, 109, 172, 214, 185, 60, 185, 218, 50, 0, 112, 159, 222, 118, 133, 203, 197, 133, 160, 74, 250, 15, 71, 225, 85, 87, 151, 45, 221, 103, 96, 133, 1, 228, 218, 202, 27, 67, 157, 218, 153, 111, },
                        {243, 85, 72, 236, 198, 85, 217, 208, 205, 13, 234, 58, 116, 129, 247, 179, 86, 21, 202, 86, 148, 100, 236, 186, 166, 168, 137, 123, 124, 212, 239, 119, 233, 219, 185, 49, 91, 179, 254, 76, 189, 68, 216, 162, 115, 239, 118, 124, 210, 48, 218, 20, 115, 173, 14, 20, 252, 82, 58, 168, 202, 1, 193, 108, },
                        {253, 14, 176, 238, 222, 30, 123, 102, 186, 186, 13, 229, 105, 220, 127, 186, 167, 140, 205, 115, 126, 4, 236, 225, 142, 11, 113, 120, 244, 175, 236, 121, 22, 50, 169, 6, 34, 194, 66, 48, 145, 162, 213, 94, 65, 74, 91, 150, 12, 146, 129, 183, 230, 43, 54, 99, 157, 85, 192, 245, 75, 142, 140, 4, },
                        {109, 164, 176, 212, 110, 228, 44, 139, 251, 21, 103, 51, 67, 114, 126, 84, 150, 82, 32, 119, 108, 182, 143, 242, 8, 15, 130, 57, 61, 44, 26, 61, 239, 201, 44, 178, 6, 42, 112, 141, 78, 204, 243, 170, 225, 236, 70, 138, 48, 13, 147, 190, 134, 6, 175, 14, 147, 207, 157, 90, 200, 193, 219, 253, },
                        {214, 56, 240, 184, 234, 52, 92, 46, 97, 39, 20, 185, 210, 17, 7, 155, 87, 10, 47, 111, 192, 116, 181, 158, 119, 134, 129, 160, 46, 50, 133, 224, 128, 38, 141, 185, 222, 117, 72, 43, 190, 91, 95, 214, 94, 161, 79, 110, 148, 153, 161, 224, 102, 205, 192, 132, 41, 86, 103, 244, 227, 86, 34, 152, },
                        {145, 23, 222, 139, 169, 70, 207, 56, 11, 253, 81, 10, 244, 172, 114, 106, 57, 110, 38, 196, 91, 11, 198, 94, 104, 178, 208, 147, 200, 122, 62, 142, 71, 201, 215, 131, 153, 56, 72, 99, 178, 186, 97, 64, 0, 177, 77, 174, 92, 31, 238, 70, 72, 63, 171, 147, 134, 190, 71, 252, 152, 42, 74, 182, },
                        {30, 100, 152, 57, 72, 173, 122, 191, 209, 82, 104, 215, 249, 7, 78, 138, 16, 251, 218, 106, 249, 207, 154, 157, 246, 232, 90, 37, 156, 50, 68, 170, 160, 226, 183, 137, 158, 174, 151, 77, 99, 215, 62, 121, 187, 129, 189, 58, 227, 23, 93, 180, 5, 235, 152, 143, 23, 199, 223, 232, 163, 231, 159, 4, },
                        {141, 193, 211, 211, 21, 252, 113, 37, 169, 46, 151, 32, 18, 85, 66, 218, 154, 149, 179, 3, 167, 63, 96, 224, 58, 58, 115, 187, 47, 169, 105, 244, 45, 239, 98, 127, 58, 107, 239, 224, 219, 197, 37, 115, 148, 65, 171, 168, 39, 55, 81, 179, 240, 229, 120, 120, 244, 192, 53, 152, 237, 170, 180, 33, },
                        {237, 245, 193, 186, 116, 111, 204, 68, 16, 151, 246, 82, 177, 237, 247, 117, 233, 44, 143, 4, 32, 167, 135, 239, 167, 29, 201, 55, 103, 244, 61, 181, 62, 105, 130, 122, 5, 250, 131, 36, 100, 102, 21, 166, 8, 148, 154, 97, 41, 26, 157, 181, 73, 100, 239, 36, 76, 48, 150, 121, 243, 171, 78, 198, },
                        {169, 150, 252, 191, 77, 143, 145, 149, 110, 55, 101, 119, 247, 230, 3, 214, 204, 108, 175, 230, 57, 210, 164, 249, 125, 21, 70, 31, 239, 151, 240, 226, 54, 107, 28, 22, 77, 145, 229, 80, 227, 18, 195, 56, 117, 51, 104, 194, 92, 227, 106, 64, 150, 109, 64, 103, 198, 127, 132, 179, 45, 229, 72, 240, },
                        {249, 172, 110, 85, 109, 224, 156, 92, 133, 254, 106, 90, 29, 200, 202, 12, 53, 95, 154, 73, 74, 172, 93, 192, 43, 89, 250, 195, 165, 48, 68, 71, 249, 89, 118, 161, 122, 171, 244, 247, 78, 65, 135, 33, 132, 155, 62, 78, 11, 237, 27, 20, 27, 123, 44, 59, 242, 159, 151, 76, 114, 191, 127, 7, },
                        {69, 96, 54, 175, 241, 134, 134, 198, 215, 213, 35, 175, 210, 45, 111, 210, 158, 23, 12, 24, 150, 234, 77, 189, 183, 126, 5, 108, 250, 22, 107, 175, 80, 136, 3, 68, 122, 189, 189, 52, 11, 48, 61, 91, 142, 176, 111, 203, 189, 108, 57, 85, 52, 42, 227, 228, 173, 178, 109, 84, 106, 177, 182, 1, },
                        {142, 160, 146, 242, 176, 237, 141, 31, 9, 58, 41, 62, 178, 109, 180, 200, 122, 84, 212, 182, 178, 182, 239, 79, 45, 31, 120, 121, 98, 14, 245, 13, 80, 233, 72, 36, 37, 213, 105, 197, 89, 140, 50, 7, 4, 105, 103, 116, 168, 24, 90, 176, 196, 215, 231, 34, 131, 178, 139, 8, 237, 240, 133, 147, },
                        {217, 200, 199, 84, 160, 112, 124, 235, 80, 240, 119, 8, 160, 71, 230, 140, 149, 49, 200, 40, 236, 80, 137, 216, 250, 127, 71, 145, 180, 232, 183, 157, 195, 173, 196, 147, 168, 71, 32, 68, 189, 26, 13, 142, 215, 116, 144, 26, 10, 212, 10, 137, 161, 83, 247, 74, 36, 28, 72, 254, 110, 22, 56, 83, },
                        {146, 72, 12, 74, 64, 5, 148, 28, 215, 166, 87, 111, 57, 134, 198, 235, 126, 197, 164, 54, 179, 188, 12, 242, 99, 59, 40, 196, 152, 46, 177, 25, 147, 239, 218, 53, 237, 80, 244, 65, 101, 89, 177, 214, 231, 227, 58, 79, 155, 90, 173, 28, 240, 129, 242, 126, 189, 145, 182, 80, 100, 195, 187, 225, },
                        {247, 80, 104, 172, 251, 220, 115, 46, 42, 155, 69, 96, 49, 169, 109, 8, 240, 210, 244, 154, 4, 107, 1, 142, 223, 233, 128, 186, 237, 198, 249, 210, 47, 92, 183, 34, 1, 196, 202, 113, 144, 53, 46, 96, 95, 207, 129, 141, 244, 220, 115, 166, 154, 6, 199, 200, 110, 136, 136, 185, 175, 80, 135, 18, },
                        {131, 116, 167, 226, 156, 24, 251, 88, 152, 76, 215, 122, 199, 143, 56, 126, 60, 104, 253, 37, 200, 219, 112, 28, 139, 198, 75, 210, 52, 160, 159, 229, 242, 217, 61, 23, 125, 180, 64, 214, 251, 162, 158, 113, 37, 5, 61, 96, 246, 177, 51, 146, 170, 231, 83, 76, 167, 238, 251, 201, 7, 108, 129, 15, },
                        {77, 86, 57, 7, 165, 96, 65, 176, 161, 21, 171, 54, 37, 26, 173, 145, 170, 143, 168, 226, 73, 74, 204, 184, 137, 90, 3, 84, 237, 91, 153, 93, 143, 48, 228, 152, 238, 20, 146, 227, 67, 82, 24, 62, 64, 166, 222, 138, 47, 253, 92, 159, 188, 64, 83, 104, 153, 209, 190, 8, 88, 206, 231, 139, },
                        {122, 79, 30, 18, 200, 155, 103, 82, 91, 222, 72, 14, 200, 216, 101, 80, 232, 238, 99, 75, 142, 84, 211, 80, 109, 35, 132, 143, 18, 233, 168, 88, 116, 177, 172, 28, 63, 99, 137, 169, 79, 79, 143, 17, 66, 216, 95, 48, 69, 86, 216, 5, 96, 218, 68, 224, 149, 8, 219, 25, 55, 213, 58, 223, },
                        {158, 21, 203, 1, 65, 143, 145, 139, 218, 197, 10, 166, 238, 176, 244, 188, 115, 118, 14, 99, 202, 160, 124, 202, 163, 59, 253, 9, 106, 67, 68, 52, 54, 226, 253, 49, 29, 85, 94, 249, 186, 174, 192, 116, 170, 108, 39, 253, 96, 109, 248, 156, 132, 227, 79, 9, 123, 217, 154, 235, 66, 52, 32, 56, },
                        {41, 97, 24, 254, 72, 137, 201, 254, 154, 190, 6, 246, 246, 132, 208, 245, 244, 5, 226, 228, 195, 136, 222, 45, 217, 1, 209, 163, 1, 1, 126, 183, 246, 31, 147, 165, 96, 123, 163, 147, 59, 50, 23, 85, 84, 128, 243, 80, 141, 186, 88, 14, 222, 140, 51, 230, 33, 167, 114, 222, 136, 154, 80, 189, },
                        {201, 158, 29, 137, 114, 7, 228, 207, 227, 67, 248, 111, 208, 219, 58, 97, 182, 17, 90, 107, 55, 191, 23, 203, 101, 191, 127, 196, 137, 16, 237, 52, 207, 71, 100, 180, 120, 233, 44, 73, 9, 241, 152, 48, 219, 45, 193, 92, 42, 29, 200, 240, 82, 181, 40, 97, 181, 145, 231, 231, 247, 88, 124, 183, },
                        {217, 140, 40, 156, 32, 92, 111, 200, 56, 245, 42, 33, 93, 138, 33, 206, 6, 82, 23, 151, 71, 253, 50, 104, 170, 88, 140, 123, 193, 81, 150, 180, 53, 98, 137, 37, 206, 225, 246, 40, 70, 6, 199, 56, 5, 45, 178, 87, 76, 140, 56, 250, 88, 149, 199, 98, 47, 33, 123, 190, 190, 11, 51, 187, },
                        {197, 228, 152, 218, 223, 97, 145, 131, 181, 77, 83, 234, 222, 90, 21, 162, 154, 101, 205, 59, 221, 161, 22, 94, 138, 230, 110, 175, 227, 71, 206, 33, 98, 75, 38, 123, 48, 120, 16, 159, 103, 46, 144, 125, 38, 132, 247, 160, 40, 184, 153, 34, 102, 96, 250, 0, 175, 240, 142, 254, 183, 66, 206, 207, },
                        {113, 13, 207, 176, 216, 20, 248, 147, 130, 58, 138, 152, 90, 179, 35, 254, 0, 120, 42, 125, 25, 94, 99, 203, 195, 110, 110, 64, 6, 184, 43, 104, 192, 86, 82, 25, 55, 63, 129, 174, 157, 117, 46, 22, 141, 39, 184, 228, 122, 182, 204, 199, 91, 239, 219, 170, 237, 85, 77, 88, 207, 42, 86, 148, },
                        {163, 178, 21, 129, 49, 65, 193, 167, 48, 207, 44, 21, 0, 64, 196, 233, 251, 242, 185, 4, 176, 223, 104, 184, 94, 124, 148, 51, 132, 95, 99, 166, 77, 249, 254, 108, 178, 234, 50, 2, 58, 224, 21, 71, 235, 163, 250, 77, 237, 167, 134, 225, 224, 109, 158, 75, 156, 0, 149, 176, 112, 48, 109, 110, },
                        {108, 124, 126, 205, 119, 49, 92, 184, 44, 235, 188, 136, 153, 156, 198, 115, 250, 24, 210, 29, 92, 118, 252, 60, 17, 212, 141, 216, 110, 136, 61, 81, 5, 116, 224, 17, 12, 253, 213, 39, 25, 19, 214, 169, 184, 199, 138, 158, 135, 94, 56, 32, 218, 246, 125, 114, 210, 173, 221, 77, 226, 173, 51, 168, },
                        {141, 173, 216, 89, 13, 73, 118, 48, 30, 222, 214, 135, 234, 244, 46, 228, 113, 181, 122, 227, 65, 185, 115, 169, 175, 22, 148, 247, 230, 194, 111, 88, 73, 119, 86, 254, 176, 109, 207, 171, 12, 244, 15, 86, 158, 76, 224, 107, 9, 11, 247, 20, 198, 76, 156, 126, 118, 204, 33, 252, 191, 143, 52, 166, },
                        {225, 206, 143, 86, 135, 186, 227, 12, 85, 22, 16, 57, 29, 181, 35, 223, 75, 200, 83, 108, 83, 54, 125, 179, 137, 101, 91, 238, 144, 132, 144, 86, 71, 205, 83, 171, 124, 76, 28, 73, 59, 94, 72, 12, 224, 122, 15, 50, 94, 225, 104, 92, 42, 110, 243, 193, 159, 35, 191, 61, 79, 254, 73, 1, },
                        {198, 87, 150, 138, 30, 34, 132, 11, 49, 191, 226, 124, 39, 47, 217, 140, 76, 37, 123, 232, 195, 16, 18, 152, 216, 21, 239, 228, 245, 208, 250, 175, 102, 4, 67, 57, 29, 112, 59, 15, 146, 190, 229, 86, 195, 213, 162, 141, 0, 194, 162, 201, 249, 79, 53, 173, 4, 117, 112, 100, 246, 6, 133, 181, },
                        {129, 83, 77, 123, 17, 56, 47, 212, 134, 114, 148, 21, 53, 66, 117, 190, 126, 31, 124, 209, 99, 175, 90, 69, 42, 73, 167, 233, 239, 228, 178, 196, 165, 17, 246, 150, 124, 27, 19, 133, 43, 193, 10, 182, 244, 192, 146, 84, 97, 222, 26, 136, 254, 119, 182, 247, 93, 53, 33, 198, 157, 58, 27, 76, },
                        {170, 12, 108, 144, 15, 115, 150, 29, 7, 220, 30, 204, 15, 254, 246, 31, 149, 50, 49, 16, 14, 103, 147, 129, 191, 164, 6, 33, 15, 218, 82, 15, 15, 252, 136, 175, 41, 165, 221, 215, 174, 252, 126, 205, 241, 42, 34, 201, 83, 101, 137, 69, 64, 172, 91, 196, 209, 33, 225, 227, 23, 103, 71, 253, },
                        {148, 179, 235, 63, 160, 181, 52, 210, 174, 98, 21, 163, 131, 88, 30, 82, 90, 171, 173, 33, 18, 26, 252, 23, 252, 239, 161, 237, 3, 85, 240, 81, 24, 136, 70, 142, 190, 32, 12, 254, 191, 146, 158, 129, 114, 46, 201, 192, 110, 42, 214, 90, 109, 154, 119, 204, 93, 241, 206, 136, 137, 49, 51, 224, },
                        {176, 5, 232, 50, 140, 236, 46, 66, 38, 206, 145, 240, 204, 195, 88, 34, 17, 76, 35, 69, 149, 231, 187, 249, 206, 189, 18, 19, 2, 37, 9, 188, 10, 214, 150, 134, 75, 4, 51, 229, 101, 218, 59, 37, 206, 197, 34, 193, 123, 74, 253, 245, 66, 124, 187, 133, 55, 1, 242, 249, 213, 190, 228, 11, },
                        {252, 245, 144, 113, 66, 194, 62, 63, 43, 243, 26, 141, 250, 226, 163, 163, 222, 247, 208, 160, 5, 206, 196, 108, 18, 24, 210, 225, 50, 242, 97, 25, 109, 23, 229, 94, 185, 210, 239, 148, 115, 16, 133, 163, 104, 105, 202, 57, 218, 214, 244, 60, 238, 194, 26, 76, 60, 239, 51, 31, 254, 100, 32, 189, },
                        {102, 85, 5, 136, 66, 62, 158, 76, 251, 90, 134, 254, 91, 47, 121, 97, 57, 90, 226, 101, 114, 92, 197, 45, 253, 35, 46, 95, 15, 230, 245, 234, 113, 37, 137, 115, 56, 197, 207, 84, 234, 239, 248, 164, 19, 185, 79, 155, 234, 126, 155, 122, 132, 186, 178, 138, 85, 83, 57, 163, 149, 72, 80, 141, },
                        {54, 123, 75, 177, 133, 113, 236, 198, 188, 224, 234, 153, 224, 158, 178, 131, 68, 140, 95, 1, 5, 75, 8, 155, 134, 201, 35, 107, 213, 80, 221, 159, 81, 60, 171, 226, 162, 110, 59, 217, 108, 104, 61, 181, 121, 43, 19, 138, 116, 49, 152, 69, 90, 60, 183, 221, 223, 84, 85, 39, 26, 11, 116, 135, },
                        {116, 235, 42, 249, 224, 28, 20, 7, 224, 108, 128, 174, 137, 74, 117, 242, 68, 193, 14, 60, 92, 51, 95, 222, 203, 98, 80, 234, 230, 76, 54, 175, 189, 149, 46, 182, 231, 102, 91, 112, 152, 61, 21, 113, 136, 169, 56, 4, 14, 204, 76, 163, 115, 71, 87, 68, 22, 96, 108, 94, 107, 115, 0, 94, },
                        {85, 0, 26, 110, 119, 88, 53, 143, 145, 140, 139, 174, 202, 28, 26, 136, 252, 233, 94, 102, 250, 46, 14, 19, 124, 88, 215, 237, 55, 113, 7, 206, 70, 21, 152, 7, 113, 241, 1, 28, 122, 176, 65, 171, 213, 66, 133, 133, 133, 194, 178, 58, 233, 183, 160, 62, 117, 204, 217, 62, 42, 16, 200, 139, },
                        {156, 144, 43, 61, 24, 62, 141, 51, 23, 33, 66, 85, 244, 110, 19, 49, 33, 96, 81, 129, 174, 127, 174, 106, 64, 212, 76, 216, 172, 115, 45, 10, 190, 239, 251, 36, 144, 167, 145, 195, 241, 46, 105, 145, 9, 202, 82, 50, 73, 188, 74, 110, 86, 227, 113, 250, 43, 126, 94, 36, 32, 227, 237, 126, },
                        {8, 155, 233, 229, 170, 143, 97, 56, 64, 7, 186, 208, 159, 189, 210, 20, 179, 141, 97, 99, 242, 60, 24, 89, 33, 100, 147, 140, 145, 206, 65, 248, 168, 86, 219, 194, 222, 30, 232, 92, 22, 237, 7, 218, 66, 141, 105, 2, 206, 77, 1, 146, 56, 74, 88, 127, 117, 146, 2, 252, 173, 14, 189, 189, },
                        {184, 234, 75, 88, 151, 93, 223, 136, 201, 187, 202, 231, 13, 72, 184, 190, 119, 145, 103, 224, 99, 244, 75, 190, 238, 160, 210, 140, 243, 110, 129, 222, 155, 24, 23, 29, 172, 140, 69, 12, 163, 157, 75, 234, 129, 232, 246, 225, 249, 143, 24, 9, 91, 55, 129, 205, 18, 11, 0, 111, 43, 112, 157, 20, },
                        {150, 191, 145, 37, 47, 178, 17, 211, 199, 11, 246, 37, 151, 187, 245, 75, 77, 237, 136, 247, 24, 91, 89, 11, 171, 214, 85, 42, 18, 83, 182, 214, 173, 81, 207, 32, 101, 120, 47, 85, 97, 11, 6, 249, 18, 1, 107, 224, 137, 209, 15, 114, 66, 107, 153, 13, 160, 108, 172, 0, 86, 87, 243, 183, },
                        {189, 121, 57, 159, 18, 57, 181, 184, 13, 174, 86, 250, 20, 216, 117, 134, 167, 42, 23, 242, 23, 234, 70, 103, 241, 179, 114, 168, 193, 65, 32, 250, 216, 14, 83, 145, 246, 90, 94, 62, 133, 203, 143, 64, 239, 97, 102, 86, 121, 64, 137, 206, 141, 200, 186, 179, 15, 113, 95, 60, 181, 34, 18, 111, },
                        {224, 59, 216, 9, 152, 225, 57, 237, 144, 254, 124, 239, 61, 31, 197, 27, 231, 127, 128, 148, 183, 148, 250, 220, 92, 229, 121, 104, 214, 94, 87, 137, 101, 243, 0, 56, 63, 72, 166, 120, 38, 226, 175, 26, 45, 165, 156, 10, 108, 137, 55, 173, 100, 245, 81, 170, 1, 169, 86, 224, 5, 237, 22, 188, },
                        {183, 152, 17, 183, 60, 144, 142, 105, 219, 148, 95, 194, 27, 115, 252, 184, 204, 124, 51, 63, 9, 95, 35, 130, 238, 202, 150, 14, 140, 227, 59, 18, 80, 234, 48, 3, 108, 156, 217, 137, 150, 105, 135, 53, 96, 35, 196, 91, 22, 135, 188, 77, 219, 6, 6, 122, 51, 40, 165, 2, 154, 55, 216, 5, },
                        {97, 55, 112, 61, 251, 191, 36, 137, 109, 243, 67, 148, 106, 198, 167, 57, 216, 176, 133, 26, 63, 22, 28, 155, 124, 18, 187, 168, 237, 192, 214, 152, 182, 196, 33, 50, 105, 155, 182, 238, 216, 57, 116, 176, 9, 146, 118, 106, 162, 232, 157, 200, 94, 38, 165, 112, 232, 38, 25, 55, 205, 135, 209, 182, },
                        {206, 126, 93, 146, 201, 42, 191, 58, 32, 52, 157, 17, 5, 191, 167, 205, 186, 84, 158, 61, 23, 238, 218, 200, 18, 106, 136, 221, 60, 66, 73, 192, 55, 228, 218, 126, 71, 31, 201, 79, 254, 143, 0, 76, 244, 179, 28, 66, 28, 215, 31, 62, 22, 62, 4, 199, 83, 175, 29, 186, 101, 29, 2, 114, },
                        {42, 56, 250, 61, 237, 114, 112, 33, 151, 166, 1, 149, 75, 98, 38, 33, 177, 235, 95, 213, 63, 48, 209, 41, 92, 39, 50, 12, 87, 191, 174, 243, 99, 231, 23, 67, 162, 62, 91, 152, 151, 188, 192, 142, 173, 246, 211, 249, 211, 162, 55, 245, 80, 158, 237, 207, 246, 72, 169, 155, 245, 144, 217, 53, },
                        {64, 62, 20, 117, 112, 204, 114, 192, 166, 127, 3, 88, 135, 183, 115, 133, 252, 247, 71, 83, 192, 219, 219, 136, 18, 230, 109, 119, 40, 60, 8, 137, 28, 77, 45, 163, 9, 242, 85, 46, 18, 195, 70, 232, 220, 40, 91, 228, 204, 96, 107, 139, 234, 163, 8, 23, 19, 148, 41, 221, 83, 122, 35, 124, },
                        {231, 30, 4, 82, 132, 162, 20, 165, 181, 126, 40, 147, 93, 117, 242, 23, 60, 149, 98, 135, 104, 85, 36, 128, 89, 61, 82, 112, 6, 19, 32, 239, 6, 28, 243, 179, 104, 195, 40, 13, 41, 9, 0, 228, 181, 19, 246, 180, 31, 160, 194, 23, 185, 99, 186, 145, 15, 2, 94, 165, 241, 35, 230, 113, },
                        {103, 195, 154, 239, 233, 66, 165, 138, 42, 149, 195, 170, 41, 167, 3, 231, 219, 43, 42, 214, 41, 11, 11, 167, 49, 91, 72, 122, 28, 161, 120, 212, 229, 143, 174, 160, 112, 107, 184, 246, 74, 245, 35, 74, 92, 45, 88, 164, 101, 11, 167, 80, 237, 77, 27, 189, 219, 111, 77, 97, 82, 36, 86, 15, },
                        {224, 35, 8, 150, 89, 125, 89, 128, 211, 144, 232, 81, 110, 87, 227, 37, 122, 14, 113, 91, 140, 30, 18, 178, 215, 181, 236, 117, 218, 231, 45, 75, 19, 186, 243, 215, 251, 128, 67, 152, 252, 163, 151, 69, 76, 59, 135, 159, 30, 11, 207, 189, 126, 219, 207, 211, 97, 209, 38, 236, 105, 18, 181, 74, },
                        {181, 216, 193, 227, 235, 89, 47, 26, 77, 189, 77, 183, 63, 50, 159, 65, 84, 44, 78, 14, 19, 7, 192, 162, 55, 175, 249, 197, 83, 56, 224, 244, 213, 51, 148, 49, 125, 31, 70, 179, 75, 129, 219, 145, 196, 253, 202, 104, 27, 122, 41, 212, 145, 52, 250, 229, 225, 225, 41, 188, 4, 36, 62, 59, },
                        {241, 220, 110, 242, 132, 177, 220, 144, 105, 152, 49, 173, 159, 51, 242, 28, 168, 177, 252, 237, 159, 66, 143, 232, 70, 63, 49, 122, 170, 218, 161, 42, 214, 184, 132, 21, 95, 141, 105, 67, 44, 252, 237, 160, 44, 214, 144, 196, 226, 68, 185, 41, 225, 210, 36, 13, 102, 191, 144, 6, 52, 223, 11, 70, },
                        {181, 33, 200, 129, 51, 226, 183, 236, 153, 109, 75, 206, 242, 74, 53, 41, 33, 178, 203, 44, 224, 248, 204, 143, 118, 152, 65, 119, 121, 184, 207, 34, 131, 218, 192, 162, 114, 232, 101, 166, 228, 45, 53, 191, 124, 109, 83, 160, 30, 17, 144, 144, 42, 51, 29, 144, 34, 155, 121, 228, 182, 184, 254, 61, },
                        {149, 62, 141, 30, 160, 114, 149, 46, 86, 2, 171, 168, 97, 5, 65, 150, 59, 213, 1, 76, 181, 161, 133, 98, 27, 210, 172, 155, 58, 0, 10, 25, 120, 165, 60, 221, 84, 198, 235, 200, 121, 115, 101, 68, 164, 94, 132, 57, 248, 234, 166, 75, 137, 118, 232, 12, 223, 95, 201, 134, 92, 194, 173, 146, },
                        {13, 27, 91, 73, 120, 180, 190, 115, 133, 66, 167, 224, 63, 55, 88, 122, 177, 244, 197, 85, 152, 176, 112, 24, 204, 147, 183, 234, 173, 206, 20, 123, 227, 69, 194, 207, 211, 228, 145, 72, 13, 43, 109, 176, 247, 222, 116, 67, 148, 231, 204, 44, 236, 12, 168, 153, 99, 85, 25, 79, 110, 81, 67, 118, },
                        {219, 147, 165, 161, 201, 118, 203, 38, 228, 225, 192, 96, 118, 159, 19, 243, 225, 205, 9, 240, 6, 59, 210, 119, 214, 180, 72, 180, 65, 218, 188, 11, 246, 174, 226, 181, 94, 202, 177, 157, 80, 77, 91, 223, 146, 98, 58, 22, 101, 213, 142, 193, 122, 89, 127, 245, 214, 207, 153, 4, 28, 165, 107, 5, }
                };
        for (int ctr = 0; ctr < oriH; ctr++)
            for (int itr = 0; itr < oriW; itr++)
                img[ctr][itr] = pp.encrypt(new BigInteger(String.valueOf(tt[ctr][itr])));
        return img;
    }

    private static BigInteger[][] packTheImg(BigInteger[][] matrix) throws Exception {
        BigInteger packedImg[][][] = new BigInteger[oriW * oriH / packedW / packedH][packedH][packedW];
        for (int ctr = 0; ctr < oriH; ctr++)
            for (int itr = 0; itr < oriW; itr++)
                packedImg[ctr / packedH * (oriW / packedW) + itr / packedW][ctr % packedH][itr % packedW] =
                        matrix[ctr][itr];
        /*
        for (int ctr = 0; ctr < packedImg.length; ctr++) {
            System.out.println("   ");
            show(packedImg[ctr]);
        }
        */
        BigInteger packed[][] = new BigInteger[packedH][packedW];

        for (int i = 0; i < packed.length; i++)
            for (int j = 0; j < packed[0].length; j++) {
                BigInteger temp = new BigInteger("0");
                for (int k = 0; k < packedImg.length; k++)
                    temp = temp.add(new BigInteger(step).pow(k).multiply(packedImg[k][i][j]));
                temp = temp.add(new BigInteger(step).pow(packedImg.length));
                packed[i][j] = temp;
            }
        //show(packed);
        return packed;
    }

    private static BigInteger[][] packTheImgPro(BigInteger[][] matrix) throws Exception {
        BigInteger packedImg[][][] = new BigInteger[oriW * oriH / packedW / packedH][packedH][packedW];
        for (int ctr = 0; ctr < oriH; ctr++)
            for (int itr = 0; itr < oriW; itr++)
                packedImg[ctr / packedH * (oriW / packedW) + itr / packedW][ctr % packedH][itr % packedW] =
                        matrix[ctr][itr];
        //for (BigInteger[][] matr: packedImg)
        //    showPro(matr);

        BigInteger packed[][] = new BigInteger[packedH][packedW];

        for (int i = 0; i < packed.length; i++)
            for (int j = 0; j < packed[0].length; j++) {
                BigInteger temp = new BigInteger("0");
                for (int k = 0; k < packedImg.length; k++)
                    temp = temp.add(new BigInteger(step).pow(k).multiply(pp.decrypt(packedImg[k][i][j])));
                temp = temp.add(new BigInteger(step).pow(packedImg.length));
                //System.out.println(temp);
                packed[i][j] = pp.encrypt(temp);
            }
        return packed;
    }

    private static BigInteger[][] getJudge(int target, int scale) throws Exception {
        BigInteger judge[][] = new BigInteger[packedH][packedW];
        //System.out.println("!!!" + packedH + " " + packedW);
        int st = Integer.valueOf(step) / 10;
        target = st / scale + target;
        for (int i = 0; i < judge.length; i++)
            for (int j = 0; j < judge[0].length; j++) {
                BigInteger temp = new BigInteger("0");
                for (int k = 0; k < oriH * oriW / (packedH * packedW); k++) {
                    BigInteger rr = new BigInteger(step).pow(k).multiply(new BigInteger(String.valueOf(target)));
                    temp = temp.add(rr);
                }
                temp = temp.add(new BigInteger(step).pow(oriH * oriW / (packedH * packedW)));
                temp = temp.multiply(new BigInteger(String.valueOf(scale)));
                judge[i][j] = temp;
            }
        //show(judge);
        //System.out.println(" ");
        return judge;
    }

    //target encrypted, scale not
    private static BigInteger[][] getJudgePro(BigInteger target, BigInteger scale) throws Exception {
        BigInteger judge[][] = new BigInteger[packedH][packedW];
        int st = Integer.valueOf(step) / 10;
        target = pp.decrypt(target);
        target = new BigInteger(String.valueOf(st)).divide(scale).add(target);
        for (int i = 0; i < judge.length; i++)
            for (int j = 0; j < judge[0].length; j++) {
                BigInteger temp = new BigInteger("0");
                for (int k = 0; k < oriH * oriW / (packedH * packedW); k++) {
                    BigInteger rr = new BigInteger(step).pow(k).multiply(new BigInteger(String.valueOf(target)));
                    temp = temp.add(rr);
                }
                temp = temp.add(new BigInteger(step).pow(oriH * oriW / (packedH * packedW)));
                temp = temp.multiply(new BigInteger(String.valueOf(scale)));
                judge[i][j] = pp.encrypt(temp);
            }
        return judge;
    }

    private static BigInteger[][] getJudgeProDiv(BigInteger target, BigInteger scale) throws Exception {
        BigInteger judge[][] = new BigInteger[packedH / 2][packedW];
        int st = Integer.valueOf(step) / 10;
        target = pp.decrypt(target);
        target = new BigInteger(String.valueOf(st)).divide(scale).add(target);
        for (int i = 0; i < judge.length; i++)
            for (int j = 0; j < judge[0].length; j++) {
                BigInteger temp = new BigInteger("0");
                for (int k = 0; k < oriH * oriW / (packedH * packedW); k++) {
                    BigInteger rr = new BigInteger(step).pow(k).multiply(new BigInteger(String.valueOf(target)));
                    temp = temp.add(rr);
                }
                temp = temp.add(new BigInteger(step).pow(oriH * oriW / (packedH * packedW)));
                temp = temp.multiply(new BigInteger(String.valueOf(scale)));
                judge[i][j] = pp.encrypt(temp);
            }
        return judge;
    }

    private static BigInteger[][] getJudge(BigInteger[][] matrix) throws Exception {
        BigInteger[][] temp = getJudge(0, 1);
        BigInteger[][] res = new BigInteger[temp.length][temp[0].length];
        for (int ctr = 0; ctr < res.length; ctr++)
            for (int itr = 0; itr < res[0].length; itr++)
                res[ctr][itr] = temp[ctr][itr].add(matrix[ctr][itr]);
        return res;
    }

    //matrix encrypted
    private static BigInteger[][] getJudgePro(BigInteger[][] matrix) throws Exception {
        BigInteger[][] temp = getJudgePro(pp.encrypt(new BigInteger("0")), new BigInteger("1"));
        BigInteger[][] res = new BigInteger[temp.length][temp[0].length];
        for (int ctr = 0; ctr < res.length; ctr++)
            for (int itr = 0; itr < res[0].length; itr++)
                res[ctr][itr] = Paillier.addBig(temp[ctr][itr], matrix[ctr][itr], pp);
        return res;
    }

    private static BigInteger[][] Gaussian(BigInteger[][] matrix) throws Exception {
        BigInteger res[][] = new BigInteger[matrix.length][matrix[0].length];
        for (int ctr = 0; ctr < res.length; ctr++)
            for (int itr = 0; itr < res[0].length; itr++)
                res[ctr][itr] = matrix[ctr][itr].multiply(new BigInteger("16"));
        int sii = 1;
        for (int i = sii; i < matrix.length - sii; i++) {
            for (int j = sii;  j < matrix[0].length - sii; j++) {
                BigInteger temp = new BigInteger("0");
                temp = temp.add(matrix[i][j].multiply(new BigInteger("4")));
                temp = temp.add(matrix[i - 1][j - 1]);
                temp = temp.add(matrix[i + 1][j - 1]);
                temp = temp.add(matrix[i + 1][j + 1]);
                temp = temp.add(matrix[i - 1][j + 1]);
                temp = temp.add(matrix[i][j - 1].multiply(new BigInteger("2")));
                temp = temp.add(matrix[i][j + 1].multiply(new BigInteger("2")));
                temp = temp.add(matrix[i - 1][j].multiply(new BigInteger("2")));
                temp = temp.add(matrix[i + 1][j].multiply(new BigInteger("2")));
                res[i][j] = temp;
            }
        }
        return res;
    }

    //matrix encrypted
    public static BigInteger[][] GaussianPro(BigInteger[][] matrix) {
        BigInteger res[][] = new BigInteger[matrix.length][matrix[0].length];
        try {
            //long gstime = System.currentTimeMillis();
            for (int ctr = 0; ctr < res.length; ctr++)
                for (int itr = 0; itr < res[0].length; itr++)
                    res[ctr][itr] = Paillier.mulBig(matrix[ctr][itr], new BigInteger("16"), pp);
            int sii = 1;
            for (int i = sii; i < matrix.length - sii; i++) {
                for (int j = sii; j < matrix[0].length - sii; j++) {
                    BigInteger temp = pp.encrypt(new BigInteger("0"));
                    temp = Paillier.addBig(temp, Paillier.mulBig(matrix[i][j], new BigInteger("4"), pp), pp);
                    temp = Paillier.addBig(temp, matrix[i - 1][j - 1], pp);
                    temp = Paillier.addBig(temp, matrix[i + 1][j - 1], pp);
                    temp = Paillier.addBig(temp, matrix[i + 1][j + 1], pp);
                    temp = Paillier.addBig(temp, matrix[i - 1][j + 1], pp);
                    temp = Paillier.addBig(temp, Paillier.mulBig(matrix[i][j - 1], new BigInteger("2"), pp), pp);
                    temp = Paillier.addBig(temp, Paillier.mulBig(matrix[i][j + 1], new BigInteger("2"), pp), pp);
                    temp = Paillier.addBig(temp, Paillier.mulBig(matrix[i - 1][j], new BigInteger("2"), pp), pp);
                    temp = Paillier.addBig(temp, Paillier.mulBig(matrix[i + 1][j], new BigInteger("2"), pp), pp);
                    res[i][j] = temp;
                }
            }
            //long getime = System.currentTimeMillis(); //获取结束时间
            //System.out.println("高斯程序运行时间： " + (getime - gstime) + "ms");
        }catch (Exception e){

        }
        return res;
    }

    public static BigInteger[][] GaussianProDiv(BigInteger[][] matrix) throws Exception {
        //long gstime = System.currentTimeMillis();
        BigInteger[][][] tempMatrix = divMatrix(matrix);
        CompletableFuture<BigInteger[][]> matrix1 = CompletableFuture.supplyAsync(() -> GaussianPro(tempMatrix[0]));
        CompletableFuture<BigInteger[][]> matrix2 = CompletableFuture.supplyAsync(() -> GaussianPro(tempMatrix[1]));

        BigInteger[][] res = getDivMatrix(matrix1.get(), matrix2.get());
        //long getime = System.currentTimeMillis(); //获取结束时间
        //System.out.println("终极高斯程序运行时间： " + (getime - gstime) + "ms");
        return res;
    }

    //matrix encrypted
    private static BigInteger[][] GaussianNor(BigInteger[][] matrix) throws Exception {
        BigInteger res[][] = copyMatrix(matrix);
        int sii = 1;
        for (int i = sii; i < matrix.length - sii; i++) {
            for (int j = sii;  j < matrix[0].length - sii; j++) {
                BigInteger temp = pp.encrypt(new BigInteger("0"));
                temp = Paillier.addBig(temp, Paillier.mulBig(matrix[i][j], new BigInteger("4"), pp), pp);
                temp = Paillier.addBig(temp, matrix[i - 1][j - 1], pp);
                temp = Paillier.addBig(temp, matrix[i + 1][j - 1], pp);
                temp = Paillier.addBig(temp, matrix[i + 1][j + 1], pp);
                temp = Paillier.addBig(temp, matrix[i - 1][j + 1], pp);
                temp = Paillier.addBig(temp, Paillier.mulBig(matrix[i][j - 1], new BigInteger("2"), pp), pp);
                temp = Paillier.addBig(temp, Paillier.mulBig(matrix[i][j + 1], new BigInteger("2"), pp), pp);
                temp = Paillier.addBig(temp, Paillier.mulBig(matrix[i - 1][j], new BigInteger("2"), pp), pp);
                temp = Paillier.addBig(temp, Paillier.mulBig(matrix[i + 1][j], new BigInteger("2"), pp), pp);
                res[i][j] = Paillier.divBig(temp, 16, pp);
            }
        }
        return res;
    }

    //judge, target
    public static BigInteger[][] comp(BigInteger[][] a, BigInteger[][] b) throws Exception {
        BigInteger subRes[][] = new BigInteger[a.length][a[0].length];
        BigInteger judgeRes[][] = new BigInteger[a.length][a[0].length];
        for (int ctr = 0; ctr < subRes.length; ctr++)
            for (int itr = 0; itr < subRes[0].length; itr++)
                subRes[ctr][itr] = a[ctr][itr].subtract(b[ctr][itr]);
        for (int ctr = 0; ctr < judgeRes.length; ctr++) {
            for (int itr = 0; itr < judgeRes[0].length; itr++) {
                BigInteger temp = new BigInteger("0"), now = subRes[ctr][itr];
                for (int jtr = 0; jtr < oriH * oriW / (packedH * packedW); jtr++) {
                    now = now.divide(new BigInteger(step.substring(0, step.length() - 1)));
                    temp = temp.multiply(new BigInteger("10"));
                    temp = temp.add(now.mod(new BigInteger("10")).add(new BigInteger("1")));
                    now = now.divide(new BigInteger("10"));
                }
                judgeRes[ctr][itr] = temp;
            }
        }
        for (int ctr = 0; ctr < judgeRes.length; ctr++)
            for (int itr = 0; itr < judgeRes[0].length; itr++)
                judgeRes[ctr][itr] = new BigInteger(new StringBuilder(judgeRes[ctr][itr].toString()).reverse().toString());
        return judgeRes;
    }

    //judge, target all encrypted
    public static BigInteger[][] compPro(BigInteger[][] a, BigInteger[][] b) throws Exception {
        /*
        BigInteger[][] testA = copyMatrix(a), testB = copyMatrix(b);
        for (int ctr = 0; ctr < a.length; ctr++)
            for (int itr = 0; itr < a[0].length; itr++) {
                testA[ctr][itr] = pp.decrypt(a[ctr][itr]);
                testB[ctr][itr] = pp.decrypt(b[ctr][itr]);
            }
        BigInteger judgeRes[][] = comp(testA, testB);
        for (int ctr = 0; ctr < a.length; ctr++)
            for (int itr = 0; itr < a[0].length; itr++) {
                judgeRes[ctr][itr] = pp.encrypt(judgeRes[ctr][itr]);
            }
        return judgeRes;
        */
        BigInteger subRes[][] = new BigInteger[a.length][a[0].length];
        BigInteger judgeRes[][] = new BigInteger[a.length][a[0].length];
        for (int ctr = 0; ctr < subRes.length; ctr++)
            for (int itr = 0; itr < subRes[0].length; itr++)
                subRes[ctr][itr] = Paillier.subBig(a[ctr][itr], b[ctr][itr], pp);
        //System.out.println("!!!!");
        //showPro(subRes);
        for (int ctr = 0; ctr < judgeRes.length; ctr++) {
            for (int itr = 0; itr < judgeRes[0].length; itr++) {
                /*
                BigInteger temp = pp.encrypt(new BigInteger("0")), now = subRes[ctr][itr];
                for (int jtr = 0; jtr < oriH * oriW / (packedH * packedW); jtr++) {
                    now = Paillier.divBig(now, Integer.valueOf(step.substring(0, step.length() - 1)), pp);
                    temp = Paillier.mulBig(temp, new BigInteger("10"), pp);
                    temp = Paillier.addBig(temp, Paillier.addBig(Paillier.modBig(now, 10, pp), pp.encrypt(new BigInteger("1")), pp), pp);
                    now = Paillier.divBig(now, 10, pp);
                }
                */
                String temp = "", tempRes = pp.decrypt(subRes[ctr][itr]).toString();
                if (tempRes.charAt(0) == '9') {
                    tempRes = '0' + tempRes;
                    //System.out.println(tempRes);
                }
                int index = 0, jtr = 0;
                for (jtr = 0; jtr < oriH * oriW / (packedH * packedW); jtr++) {
                    temp += (char)(tempRes.charAt(index) + 1);
                    //if ((char)(tempRes.charAt(index) + 1) == '6') System.out.println("!!!!");
                    index += step.length() - 1;
                    //System.out.println(jtr);
                }
                //System.out.print(jtr);
                judgeRes[ctr][itr] = pp.encrypt(new BigInteger(temp));
            }
        }
        //for (int ctr = 0; ctr < judgeRes.length; ctr++)
         //   for (int itr = 0; itr < judgeRes[0].length; itr++)
         //       judgeRes[ctr][itr] = pp.encrypt(new BigInteger(new StringBuilder(pp.decrypt(judgeRes[ctr][itr]).toString()).reverse().toString()));
        return judgeRes;
    }

    private static void show(BigInteger[][] matrix) {
        for (BigInteger[] line: matrix) {
            for (BigInteger item: line)
                System.out.print(item + "'\t");
            System.out.println(" ");
        }
    }

    public static void showPro(BigInteger[][] matrix) throws Exception {
        for (BigInteger[] line: matrix) {
            for (BigInteger item: line)
                System.out.print(pp.decrypt(item) + "'\t");
            System.out.println(" ");
        }
        System.out.println("____________________________________________________________");
    }

    private static void showInFormatPro(BigInteger[][] matrix) throws Exception {
        for (BigInteger[] line: matrix) {
            for (BigInteger item: line)
                System.out.format("%10s", pp.decrypt(item) + " ");
            System.out.println(" ");
        }
    }

    private static int getThreshold(int thres0, BigInteger[][] packedImg, int scale, int delta) throws Exception {
        BigInteger[][] judge = getJudge(thres0, scale);
        BigInteger[][] compRes = comp(judge, packedImg);
        //System.out.println("compRes: ");
        //show(compRes);
        BigInteger oriPack[][] = new BigInteger[packedImg.length][packedImg[0].length];
        BigInteger sumFront = new BigInteger("0"), sumBack = new BigInteger("0");
        BigInteger numFront = new BigInteger("0"), numBack = new BigInteger("0");
        for (int ctr = 0; ctr < compRes.length; ctr++) {
            for (int itr = 0; itr < compRes[0].length; itr++) {
                oriPack[ctr][itr] = packedImg[ctr][itr];
                for (int jtr = 0; jtr < oriH * oriW / (packedH * packedW); jtr++) {
                    BigInteger now = compRes[ctr][itr].mod(new BigInteger("10")).subtract(new BigInteger("1"));
                    compRes[ctr][itr] = compRes[ctr][itr].divide(new BigInteger("10"));
                    BigInteger now2 = packedImg[ctr][itr].mod(new BigInteger(step));
                    packedImg[ctr][itr] = packedImg[ctr][itr].divide(new BigInteger(step));
                    if (now.toString().equals("1")) {
                        sumFront = sumFront.add(now2);
                        numFront = numFront.add(new BigInteger("1"));
                    }
                    else {
                        numBack = numBack.add(new BigInteger("1"));
                        sumBack = sumBack.add(now2);
                    }
                }
            }
        }
        /*
        System.out.println("sumFront:" + sumFront);
        System.out.println("sumBack:" + sumBack);
        System.out.println("numFront:" + numFront);
        System.out.println("numBack:" + numBack);
        */
        BigInteger thresFront = sumFront.divide(numFront);
        BigInteger thresBack = sumBack.divide(numBack);
        int newThres = Integer.valueOf((thresFront.add(thresBack)).divide(new BigInteger("2")).toString()) / scale;
        //System.out.println(newThres);
        if (Math.abs(thres0 - newThres) < delta) return newThres;
        else return getThreshold(newThres, oriPack, scale, delta);
    }

    private static BigInteger getThresholdNor(BigInteger thres0, BigInteger[][] packedImg, BigInteger delta) throws Exception {
        //showInFormatPro(packedImg);
        System.out.print("getting thres, round " + round + " and the result is ");
        round++;
        BigInteger oriPack[][] = new BigInteger[packedImg.length][packedImg[0].length];
        BigInteger sumFront = pp.encrypt(new BigInteger("0")), sumBack = pp.encrypt(new BigInteger("0"));
        BigInteger numFront = pp.encrypt(new BigInteger("0")), numBack = pp.encrypt(new BigInteger("0"));
        for (int ctr = 0; ctr < packedImg.length; ctr++)
            for (int itr = 0; itr < packedImg[0].length; itr++) {
                oriPack[ctr][itr] = packedImg[ctr][itr];
                if (Integer.valueOf(pp.decrypt(packedImg[ctr][itr]).toString()) > Integer.valueOf(pp.decrypt(thres0).toString())) {
                    sumFront = Paillier.addBig(sumFront, packedImg[ctr][itr], pp);
                    numFront = Paillier.addBig(numFront, pp.encrypt(new BigInteger("1")), pp);
                }
                else {
                    sumBack = Paillier.addBig(sumBack, packedImg[ctr][itr], pp);
                    numBack = Paillier.addBig(numBack, pp.encrypt(new BigInteger("1")), pp);
                }
            }
        //System.out.println("sumFront:" + pp.decrypt(sumFront));
        //System.out.println("sumBack:" + pp.decrypt(sumBack));
        //System.out.println("numFront:" + pp.decrypt(numFront));
        //System.out.println("numBack:" + pp.decrypt(numBack));
        BigInteger thresFront = Paillier.divBig(sumFront, Integer.valueOf(pp.decrypt(numFront).toString()), pp);
        BigInteger thresBack = Paillier.divBig(sumBack, Integer.valueOf(pp.decrypt(numBack).toString()), pp);
        BigInteger newThres = Paillier.divBig(Paillier.addBig(thresBack, thresFront, pp), 2, pp);
        System.out.println("thres: " + pp.decrypt(newThres));
        if (Math.abs
                (Integer.valueOf(pp.decrypt(thres0).subtract(pp.decrypt(newThres)).toString()))
                < Integer.valueOf(pp.decrypt(delta).toString())) return newThres;
        else return getThresholdNor(newThres, oriPack, delta);
    }

    //tres0, matrix, delta encrypted, scale not
    private static BigInteger getThresholdPro(BigInteger thres0, BigInteger[][] packedImg, BigInteger scale, BigInteger delta) throws Exception {
        System.out.print("getting thres, round " + round + " and the result is ");
        round++;
        BigInteger[][] judge = getJudgePro(thres0, scale);
        BigInteger[][] compRes = compPro(judge, packedImg);
        BigInteger oriPack[][] = new BigInteger[packedImg.length][packedImg[0].length];
        BigInteger sumFront = pp.encrypt(new BigInteger("0")), sumBack = pp.encrypt(new BigInteger("0"));
        BigInteger numFront = pp.encrypt(new BigInteger("0")), numBack = pp.encrypt(new BigInteger("0"));
        for (int ctr = 0; ctr < compRes.length; ctr++) {
            for (int itr = 0; itr < compRes[0].length; itr++) {
                oriPack[ctr][itr] = packedImg[ctr][itr];
                String tempStr = pp.decrypt(packedImg[ctr][itr]).toString();
                int index = scale.toString().length();
                for (int jtr = 0; jtr < oriH * oriW / (packedH * packedW); jtr++) {
                    BigInteger now = Paillier.subBig(Paillier.modBig(compRes[ctr][itr], 10, pp), pp.encrypt(new BigInteger("1")), pp);
                    compRes[ctr][itr] = Paillier.divBig(compRes[ctr][itr], 10, pp);
                    BigInteger now2 = pp.encrypt(
                            new BigInteger(tempStr.substring(index, index + step.length() - 1))
                    );
                    index += step.length() - 1;
                    if (Paillier.isEq(now, pp.encrypt(new BigInteger("1")), pp)) {
                        sumFront = Paillier.addBig(sumFront, now2, pp);
                        numFront = Paillier.addBig(numFront, pp.encrypt(new BigInteger("1")), pp);
                    }
                    else {
                        sumBack = Paillier.addBig(sumBack, now2, pp);
                        numBack = Paillier.addBig(numBack, pp.encrypt(new BigInteger("1")), pp);
                    }

                }
            }
        }
        BigInteger thresFront = Paillier.divBig(sumFront, Integer.valueOf(pp.decrypt(numFront).toString()), pp);
        BigInteger thresBack = Paillier.divBig(sumBack, Integer.valueOf(pp.decrypt(numBack).toString()), pp);
        BigInteger newThres = Paillier.divBig(Paillier.addBig(thresBack, thresFront, pp), 2 * Integer.valueOf(scale.toString()), pp);
        System.out.println("thres: " + pp.decrypt(newThres));
        if (Math.abs
                (Integer.valueOf(pp.decrypt(thres0).subtract(pp.decrypt(newThres)).toString()))
                < Integer.valueOf(pp.decrypt(delta).toString())) return newThres;
        else return getThresholdPro(newThres, oriPack, scale, delta);
    }

    private static BigInteger[][] tempGetThresHold(BigInteger thres0, BigInteger[][] packedImg, BigInteger scale) throws Exception {
        BigInteger res[][] = new BigInteger[2][4];
        BigInteger[][][] tempMatrix = divMatrix(packedImg);
        CompletableFuture<BigInteger[]> matrix1 = CompletableFuture.supplyAsync(() ->
                getThresholdProLittle(thres0, tempMatrix[0], scale));
        CompletableFuture<BigInteger[]> matrix2 = CompletableFuture.supplyAsync(() ->
                getThresholdProLittle(thres0, tempMatrix[1], scale));
        res[0] = matrix1.get();
        res[1] = matrix2.get();
        return res;
    }

    private static BigInteger getThresholdProDiv(BigInteger thres0, BigInteger[][] packedImg, BigInteger scale, BigInteger delta) throws Exception {
        System.out.print("getting thres, round " + round + " and the result is ");
        round++;
        BigInteger[][] oriPack = copyMatrix(packedImg);
        BigInteger[][] tempMatrix = tempGetThresHold(thres0, packedImg, scale);
        BigInteger sumFront = Paillier.addBig(tempMatrix[0][0], tempMatrix[1][0], pp);
        BigInteger sumBack = Paillier.addBig(tempMatrix[0][1], tempMatrix[1][1], pp);
        BigInteger numFront = Paillier.addBig(tempMatrix[0][2], tempMatrix[1][2], pp);
        BigInteger numBack = Paillier.addBig(tempMatrix[0][3], tempMatrix[1][3], pp);
        BigInteger thresFront = Paillier.divBig(sumFront, Integer.valueOf(pp.decrypt(numFront).toString()), pp);
        BigInteger thresBack = Paillier.divBig(sumBack, Integer.valueOf(pp.decrypt(numBack).toString()), pp);
        BigInteger newThres = Paillier.divBig(Paillier.addBig(thresBack, thresFront, pp), 2 * Integer.valueOf(scale.toString()), pp);
        System.out.println("thres: " + pp.decrypt(newThres));
        if (Math.abs
                (Integer.valueOf(pp.decrypt(thres0).subtract(pp.decrypt(newThres)).toString()))
                < Integer.valueOf(pp.decrypt(delta).toString())) return newThres;
        else return getThresholdPro(newThres, oriPack, scale, delta);
    }

    private static BigInteger[] getThresholdProLittle(BigInteger thres0, BigInteger[][] packedImg, BigInteger scale) {
        BigInteger[] res = new BigInteger[4];
        try {
            //showPro(packedImg);
            BigInteger[][] judge = getJudgeProDiv(thres0, scale);
            BigInteger[][] compRes = compPro(judge, packedImg);
            //System.out.println(compRes.length + " " + compRes[0].length);
            BigInteger sumFront = pp.encrypt(new BigInteger("0")), sumBack = pp.encrypt(new BigInteger("0"));
            BigInteger numFront = pp.encrypt(new BigInteger("0")), numBack = pp.encrypt(new BigInteger("0"));
            for (int ctr = 0; ctr < compRes.length; ctr++) {
                for (int itr = 0; itr < compRes[0].length; itr++) {
                    String tempStr = pp.decrypt(packedImg[ctr][itr]).toString();
                    //System.out.println(tempStr);
                    int index = scale.toString().length();
                    for (int jtr = 0; jtr < oriH * oriW / (packedH * packedW); jtr++) {
                        BigInteger now = Paillier.subBig(Paillier.modBig(compRes[ctr][itr], 10, pp), pp.encrypt(new BigInteger("1")), pp);
                        compRes[ctr][itr] = Paillier.divBig(compRes[ctr][itr], 10, pp);
                        BigInteger now2 = pp.encrypt(
                                new BigInteger(tempStr.substring(index, index + step.length() - 1))
                        );
                        index += step.length() - 1;
                        if (Paillier.isEq(now, pp.encrypt(new BigInteger("1")), pp)) {
                            sumFront = Paillier.addBig(sumFront, now2, pp);
                            numFront = Paillier.addBig(numFront, pp.encrypt(new BigInteger("1")), pp);
                        } else {
                            sumBack = Paillier.addBig(sumBack, now2, pp);
                            numBack = Paillier.addBig(numBack, pp.encrypt(new BigInteger("1")), pp);
                        }

                    }
                }
            }
            //System.out.println("????");
            res[0] = sumFront;
            res[1] = sumBack;
            res[2] = numFront;
            res[3] = numBack;

            //System.out.println("sumFront:" + pp.decrypt(sumFront));
            //System.out.println("sumBack:" + pp.decrypt(sumBack));
            //System.out.println("numFront:" + pp.decrypt(numFront));
            //System.out.println("numBack:" + pp.decrypt(numBack));
            //System.out.print("res:");
            //for (int ctr = 0; ctr < 4; ctr++)
            //    System.out.print(pp.decrypt(res[ctr]) + " ");
            //System.out.println("!");
        } catch (Exception e) {

        }
        return res;
    }

    private static BigInteger[][] binarization(int threshold, int scale, BigInteger[][] matrix) throws Exception {
        BigInteger[][] judge = getJudge(threshold, scale);
        BigInteger[][] compRes = comp(judge, matrix);
        /*
        System.out.println("matrix:");
        show(matrix);
        System.out.println("compRes:");
        show(compRes);
        System.out.println("judge:");
        show(judge);
        */
        BigInteger res[][] = new BigInteger[matrix.length][matrix[0].length];
        for (int ctr = 0; ctr < res.length; ctr++)
            for (int itr = 0; itr < res[0].length; itr++) {
                BigInteger temp = new BigInteger("0");
                for (int k = 0; k < oriH * oriW / (packedH * packedW); k++) {
                    BigInteger now = compRes[ctr][itr].mod(new BigInteger("10")).subtract(new BigInteger("1"));
                    now = new BigInteger("1").subtract(now);
                    compRes[ctr][itr] = compRes[ctr][itr].divide(new BigInteger("10"));
                    BigInteger rr = new BigInteger(step).pow(k).multiply(now).multiply(new BigInteger("255"));
                    temp = temp.add(rr);
                }
                temp = temp.add(new BigInteger(step).pow(oriH * oriW / (packedH * packedW)));
                res[ctr][itr] = temp;
            }

        return res;
    }

    //threshold, matrix encrypted, scale not
    private static BigInteger[][] binarizationPro(BigInteger threshold, BigInteger scale, BigInteger[][] matrix) throws Exception {
        BigInteger[][] judge = getJudgePro(threshold, scale);
        BigInteger[][] compRes = compPro(judge, matrix);
        BigInteger res[][] = new BigInteger[matrix.length][matrix[0].length];
        for (int ctr = 0; ctr < res.length; ctr++)
            for (int itr = 0; itr < res[0].length; itr++) {
                BigInteger temp = pp.encrypt(new BigInteger("0"));
                for (int k = 0; k < oriH * oriW / (packedH * packedW); k++) {
                    //BigInteger now = Paillier.modBig(compRes[ctr][itr], 10, pp);
                    BigInteger now = Paillier.subBig(Paillier.modBig(compRes[ctr][itr], 10, pp), pp.encrypt(new BigInteger("1")), pp);
                    now = Paillier.subBig(pp.encrypt(new BigInteger("1")), now, pp);
                    compRes[ctr][itr] = Paillier.divBig(compRes[ctr][itr], 10, pp);
                    BigInteger rr = Paillier.mulBig(Paillier.pow(pp.encrypt(new BigInteger(step)), k, pp), pp.decrypt(now).multiply(new BigInteger("255")), pp);
                    temp = Paillier.addBig(temp, rr, pp);
                }
                temp = Paillier.addBig(temp, Paillier.pow(pp.encrypt(new BigInteger(step)), oriH * oriW / (packedH * packedW), pp), pp);
                res[ctr][itr] = temp;
            }
        return res;
    }

    //threshold, matrix encrypted, scale not
    private static BigInteger[][] binarizationNor(BigInteger threshold, BigInteger[][] matrix) throws Exception {
        BigInteger res[][] = new BigInteger[matrix.length][matrix[0].length];
        for (int ctr = 0; ctr < res.length; ctr++)
            for (int itr = 0; itr < res[0].length; itr++) {
                if (pp.decrypt(matrix[ctr][itr]).compareTo(pp.decrypt(threshold)) == 1) res[ctr][itr] = pp.encrypt(new BigInteger("255"));
                else res[ctr][itr] = pp.encrypt(new BigInteger("0"));
            }
        return res;
    }

    private static BigInteger[][] sobelIt(BigInteger[][] matrix) throws Exception {
        BigInteger[][] s1_as = copyMatrix(matrix);
        BigInteger[][] s1_bs = copyMatrix(matrix);
        BigInteger[][] s2_as = copyMatrix(matrix);
        BigInteger[][] s2_bs = copyMatrix(matrix);
        BigInteger[][] res = copyMatrix(matrix);
        for (int ctr = 1; ctr < res.length - 1; ctr++) {
            for (int itr = 1; itr < res[0].length - 1; itr++) {
                BigInteger s1_a = new BigInteger("0");
                BigInteger s1_b = new BigInteger("0");
                BigInteger s2_a = new BigInteger("0");
                BigInteger s2_b = new BigInteger("0");
                s1_a = s1_a.add(matrix[ctr - 1][itr + 1]).add(matrix[ctr][itr + 1])
                           .add(matrix[ctr][itr + 1]).add(matrix[ctr + 1][itr + 1]);
                s1_b = s1_b.add(matrix[ctr - 1][itr - 1]).add(matrix[ctr][itr - 1])
                        .add(matrix[ctr][itr - 1]).add(matrix[ctr + 1][itr - 1]);
                s2_a = s2_a.add(matrix[ctr - 1][itr - 1]).add(matrix[ctr - 1][itr])
                        .add(matrix[ctr - 1][itr]).add(matrix[ctr - 1][itr + 1]);
                s2_b = s2_b.add(matrix[ctr + 1][itr - 1]).add(matrix[ctr + 1][itr])
                        .add(matrix[ctr + 1][itr]).add(matrix[ctr + 1][itr + 1]);
                s1_as[ctr][itr] = s1_a;
                s1_bs[ctr][itr] = s1_b;
                s2_as[ctr][itr] = s2_a;
                s2_bs[ctr][itr] = s2_b;
            }
        }
        BigInteger[][] resS1 = comp(getJudge(s1_as), s1_bs);
        BigInteger[][] resS2 = comp(getJudge(s2_as), s2_bs);
        //System.out.println("s1_as:");
        //show(s1_as);
        //System.out.println("s1_bs:");
        //show(s1_bs);
        //System.out.println("s2_as:");
        //show(s2_as);
        //System.out.println("s2_bs:");
        //show(s2_bs);
        //System.out.println("resS1:");
        //show(resS1);
        //System.out.println("resS2:");
        //show(resS2);
        for (int ctr = 0; ctr < res.length; ctr++)
            for (int itr = 0; itr < res[0].length; itr++)
                res[ctr][itr] = absSub(s1_as[ctr][itr], s1_bs[ctr][itr], resS1[ctr][itr])
                              .add(absSub(s2_as[ctr][itr], s2_bs[ctr][itr], resS2[ctr][itr]));
        //System.out.println("res:");
        //show(res);
        return res;
    }

    private static BigInteger[][] unPacking(BigInteger[][] matrix) throws Exception {
        BigInteger[][] res = new BigInteger[oriH][oriW];
        int tempH = oriH / packedH, tempW = oriW / packedW;
        for (int ctr = 0; ctr < packedH; ctr++)
            for (int itr = 0; itr < packedW; itr++) {
                int index = 1;
                String tempStr = pp.decrypt(matrix[ctr][itr]).toString();
                for (int jtr = 0; jtr < tempW * tempH; jtr++) {
                    res[jtr / tempH * packedH + ctr][jtr % tempW * packedW + itr] = pp.encrypt(
                            new BigInteger(tempStr.substring(index, index + step.length() - 2))
                    );
                    index += step.length() - 1;
                }
            }
        return res;
    }

    //encrypted matrix
    private static BigInteger[][] sobelItPro(BigInteger[][] matrix) throws Exception {
        BigInteger[][] s1_as = copyMatrix(matrix);
        BigInteger[][] s1_bs = copyMatrix(matrix);
        BigInteger[][] s2_as = copyMatrix(matrix);
        BigInteger[][] s2_bs = copyMatrix(matrix);
        BigInteger[][] res = copyMatrix(matrix);
        for (int ctr = 1; ctr < res.length - 1; ctr++) {
            for (int itr = 1; itr < res[0].length - 1; itr++) {
                BigInteger s1_a = Paillier.addBig(matrix[ctr + 1][itr + 1],
                        Paillier.addBig(matrix[ctr][itr + 1],
                         Paillier.addBig(matrix[ctr - 1][itr + 1], matrix[ctr][itr + 1], pp), pp), pp);
                BigInteger s1_b = Paillier.addBig(matrix[ctr - 1][itr - 1],
                        Paillier.addBig(matrix[ctr][itr - 1],
                                Paillier.addBig(matrix[ctr][itr - 1], matrix[ctr + 1][itr - 1], pp), pp), pp);
                BigInteger s2_a = Paillier.addBig(matrix[ctr - 1][itr - 1],
                        Paillier.addBig(matrix[ctr - 1][itr],
                                Paillier.addBig(matrix[ctr - 1][itr], matrix[ctr - 1][itr + 1], pp), pp), pp);
                BigInteger s2_b = Paillier.addBig(matrix[ctr + 1][itr - 1],
                        Paillier.addBig(matrix[ctr + 1][itr],
                                Paillier.addBig(matrix[ctr + 1][itr], matrix[ctr + 1][itr + 1], pp), pp), pp);
                /*
                BigInteger s1_a = new BigInteger("0");
                BigInteger s1_b = new BigInteger("0");
                BigInteger s2_a = new BigInteger("0");
                BigInteger s2_b = new BigInteger("0");
                s1_a = s1_a.add(pp.decrypt(matrix[ctr - 1][itr + 1])).add(pp.decrypt(matrix[ctr][itr + 1]))
                        .add(pp.decrypt(matrix[ctr][itr + 1])).add(pp.decrypt(matrix[ctr + 1][itr + 1]));
                s1_b = s1_b.add(pp.decrypt(matrix[ctr - 1][itr - 1])).add(pp.decrypt(matrix[ctr][itr - 1]))
                        .add(pp.decrypt(matrix[ctr][itr - 1])).add(pp.decrypt(matrix[ctr + 1][itr - 1]));
                s2_a = s2_a.add(pp.decrypt(matrix[ctr - 1][itr - 1])).add(pp.decrypt(matrix[ctr - 1][itr]))
                        .add(pp.decrypt(matrix[ctr - 1][itr])).add(pp.decrypt(matrix[ctr - 1][itr + 1]));
                s2_b = s2_b.add(pp.decrypt(matrix[ctr + 1][itr - 1])).add(pp.decrypt(matrix[ctr + 1][itr]))
                        .add(pp.decrypt(matrix[ctr + 1][itr])).add(pp.decrypt(matrix[ctr + 1][itr + 1]));

                s1_as[ctr][itr] = pp.encrypt(s1_a);
                s1_bs[ctr][itr] = pp.encrypt(s1_b);
                s2_as[ctr][itr] = pp.encrypt(s2_a);
                s2_bs[ctr][itr] = pp.encrypt(s2_b);
                 */
                s1_as[ctr][itr] = s1_a;
                s1_bs[ctr][itr] = s1_b;
                s2_as[ctr][itr] = s2_a;
                s2_bs[ctr][itr] = s2_b;
            }
        }
        BigInteger[][] resS1 = compPro(getJudgePro(s1_as), s1_bs);
        BigInteger[][] resS2 = compPro(getJudgePro(s2_as), s2_bs);
        /*
        System.out.println("s1_as:");
        showPro(s1_as);
        System.out.println("s1_bs:");
        showPro(s1_bs);
        System.out.println("s2_as:");
        showPro(s2_as);
        System.out.println("s2_bs:");
        showPro(s2_bs);
        System.out.println("resS1:");
        showPro(resS1);
        System.out.println("resS2:");
        showPro(resS2);
        */
        //BigInteger[][] tempRes1 = new BigInteger[s1_as.length][s1_as[0].length];
        //BigInteger[][] tempRes2 = new BigInteger[s1_as.length][s1_as[0].length];
        for (int ctr = 0; ctr < res.length; ctr++)
            for (int itr = 0; itr < res[0].length; itr++){
                //tempRes1[ctr][itr] = absSubPro(s1_as[ctr][itr], s1_bs[ctr][itr], resS1[ctr][itr]);
                //tempRes2[ctr][itr] = absSubPro(s2_as[ctr][itr], s2_bs[ctr][itr], resS2[ctr][itr]);
                res[ctr][itr] = Paillier.addBig(absSubPro(s1_as[ctr][itr], s1_bs[ctr][itr], resS1[ctr][itr]), absSubPro(s2_as[ctr][itr], s2_bs[ctr][itr], resS2[ctr][itr]), pp);
            }
        //System.out.println("res1:");
        //showPro(tempRes1);
        //System.out.println("res2:");
        //showPro(tempRes2);
        //res[ctr][itr] = Paillier.addBig(absSubPro(s1_as[ctr][itr], s1_bs[ctr][itr], resS1[ctr][itr]),
                        //absSubPro(s2_as[ctr][itr], s2_bs[ctr][itr], resS2[ctr][itr]), pp);
        //System.out.println("res:");
        //show(res);
        return res;
    }

    private static BigInteger[][] sobelItProVersionII(BigInteger[][] matrix) throws Exception {
        BigInteger[][] unpacked = unPacking(matrix);
        return sobelItNor(unpacked);
    }

    private static BigInteger[][] sobelItProVersionIIDiv(BigInteger[][] matrix) throws Exception {
        BigInteger[][][] tempMatrix = divMatrix(unPacking(matrix));
        CompletableFuture<BigInteger[][]> matrix1 = CompletableFuture.supplyAsync(() -> sobelItNor(tempMatrix[0]));
        CompletableFuture<BigInteger[][]> matrix2 = CompletableFuture.supplyAsync(() -> sobelItNor(tempMatrix[1]));

        BigInteger[][] res = getDivMatrix(matrix1.get(), matrix2.get());
        return res;

    }

    private static BigInteger[][] sobelItNor(BigInteger[][] matrix) {
        BigInteger[][] res = new BigInteger[1][1];
        try {
            res = copyMatrix(matrix);
            for (int ctr = 1; ctr < res.length - 1; ctr++) {
                for (int itr = 1; itr < res[0].length - 1; itr++) {
                    BigInteger s1_a = Paillier.addBig(
                            matrix[ctr - 1][itr + 1], Paillier.addBig(
                                    matrix[ctr + 1][itr + 1], Paillier.mulBig(
                                            matrix[ctr][itr + 1], new BigInteger("2"), pp), pp), pp);
                    BigInteger s1_b = Paillier.addBig(
                            matrix[ctr - 1][itr - 1], Paillier.addBig(
                                    matrix[ctr + 1][itr - 1], Paillier.mulBig(
                                            matrix[ctr][itr - 1], new BigInteger("2"), pp), pp), pp);
                    BigInteger s2_a = Paillier.addBig(
                            matrix[ctr - 1][itr - 1], Paillier.addBig(
                                    matrix[ctr - 1][itr + 1], Paillier.mulBig(
                                            matrix[ctr - 1][itr], new BigInteger("2"), pp), pp), pp);
                    BigInteger s2_b = Paillier.addBig(
                            matrix[ctr + 1][itr - 1], Paillier.addBig(
                                    matrix[ctr + 1][itr + 1], Paillier.mulBig(
                                            matrix[ctr + 1][itr], new BigInteger("2"), pp), pp), pp);
                    res[ctr][itr] = Paillier.addBig(
                            (pp.decrypt(s1_a).compareTo(pp.decrypt(s1_b)) == 1) ? Paillier.subBig(s1_a, s1_b, pp) : Paillier.subBig(s1_b, s1_a, pp),
                            (pp.decrypt(s2_a).compareTo(pp.decrypt(s2_b)) == 1) ? Paillier.subBig(s2_a, s2_b, pp) : Paillier.subBig(s2_b, s2_a, pp),
                            pp);

                }
            }
        } catch (Exception e) {

        }
        return res;
    }

    private static BigInteger absSub(BigInteger a, BigInteger b, BigInteger compRes) throws Exception {
        BigInteger res = new BigInteger("0");
        int power = 0;
        while (!compRes.toString().equals("0")) {
            BigInteger now = compRes.mod(new BigInteger("10"));
            compRes = compRes.divide(new BigInteger("10"));
            BigInteger nowA = a.mod(new BigInteger(step));
            BigInteger nowB = b.mod(new BigInteger(step));
            a = a.divide(new BigInteger(step));
            b = b.divide(new BigInteger(step));
            /*
            System.out.println("____________________");
            System.out.println("now: " + now.toString());
            System.out.println("nowA: " + nowA.toString());
            System.out.println("nowB: " + nowB.toString());
            */
            BigInteger rr;
            if (now.toString().equals("2"))
                 rr = new BigInteger(step).pow(power).multiply(nowA.subtract(nowB));
            else rr = new BigInteger(step).pow(power).multiply(nowB.subtract(nowA));
            //System.out.println("rr:" + rr.toString());
            res = res.add(rr);
            power += 1;
        }
        res = res.add(new BigInteger(step).pow(power));
        return res;
    }

    //all encrypted
    private static BigInteger absSubPro(BigInteger a, BigInteger b, BigInteger compRes) throws Exception {
        BigInteger res = pp.encrypt(new BigInteger("0"));
        //System.out.println("Pa: " + pp.decrypt(a).toString());
        //System.out.println("Pb: " + pp.decrypt(b).toString());
        //System.out.println("Pcr: " + pp.decrypt(compRes).toString());
        int power = 0;
        while (!Paillier.isEq(compRes, pp.encrypt(new BigInteger("0")), pp)) {
            //System.out.println("P____________________");
            //System.out.println("power: " + power);
            BigInteger now = Paillier.modBig(compRes, 10, pp);
            compRes = Paillier.divBig(compRes, 10, pp);
            BigInteger nowA = Paillier.modBig(a, Integer.valueOf(step), pp);
            BigInteger nowB = Paillier.modBig(b, Integer.valueOf(step), pp);
            a = Paillier.divBig(a, Integer.valueOf(step), pp);
            b = Paillier.divBig(b, Integer.valueOf(step), pp);
            //System.out.println("Pnow: " + pp.decrypt(now).toString());
            //System.out.println("PnowA: " + pp.decrypt(nowA).toString());
            //System.out.println("PnowB: " + pp.decrypt(nowB).toString());
            BigInteger rr;
            if (Paillier.isEq(now, pp.encrypt(new BigInteger("2")), pp)) {
                //System.out.println("a big");
                rr = Paillier.mulBig(Paillier.subBig(nowA, nowB, pp), new BigInteger(step).pow(power), pp);
            }
            else {
                //System.out.println("b big");
                rr = Paillier.mulBig(Paillier.subBig(nowB, nowA, pp), new BigInteger(step).pow(power), pp);
            }
            //System.out.println("the power: " + new BigInteger(String.valueOf((int) (Math.pow(Integer.valueOf(step), power)))));
            //System.out.println("rr:" + pp.decrypt(rr));
            res = Paillier.addBig(res, rr, pp);
            power += 1;
        }
        res = Paillier.addBig(res, Paillier.pow(pp.encrypt(new BigInteger(step)), power, pp), pp);
        return res;
    }

    private static BigInteger[][] copyMatrix(BigInteger[][] matrix) throws Exception {
        BigInteger res[][] = new BigInteger[matrix.length][matrix[0].length];
        for (int ctr = 0; ctr < matrix.length; ctr++)
            for (int itr = 0; itr < matrix[0].length; itr++)
                res[ctr][itr] = matrix[ctr][itr];
        return res;
    }

    public static BigInteger[][][] divMatrix(BigInteger[][] matrix) throws Exception {
        BigInteger[][][] res = new BigInteger[4][matrix.length / 2][matrix[0].length];
        for (int ctr = 0; ctr < matrix.length; ctr++) {
            for (int itr = 0; itr < matrix[0].length; itr++) {
                res[ctr / res[0].length][ctr % res[0].length][itr] = matrix[ctr][itr];
            }
        }
        return res;
    }

    public static BigInteger[][] getDivMatrix(BigInteger[][] matrix1, BigInteger[][] matrix2) throws Exception {
        BigInteger[][] res = new BigInteger[matrix1.length * 2][matrix1[0].length];
        for (int ctr = 0; ctr < matrix1.length; ctr++)
            for (int itr = 0; itr < matrix1[0].length; itr++)
                res[ctr][itr] = matrix1[ctr][itr];
        for (int ctr = matrix1.length; ctr < res.length; ctr++)
            for (int itr = 0; itr < res[0].length; itr++)
                res[ctr][itr] = matrix2[ctr - matrix1.length][itr];
        return res;
    }

    public static BigInteger[][] hybridSystemPro(int stp, int oH, int oW, int pieceH, int pieceW) throws Exception {
        //1000000, 32, 32, 16, 16
        BigInteger img[][] = initialImgPro(stp, oH, oW, pieceH, pieceW);
        //System.out.println("ooorigin matrix:");
        //showPro(img);
        BigInteger packed[][] = packTheImgPro(img);
        //System.out.println("origin matrix:");
        //showPro(packed);
        //BigInteger unpacked[][] = unPacking(packed);
        //System.out.println("really origin matrix:");
        //showPro(unpacked);
        //BigInteger Gres[][] = GaussianProDiv(packed);
        BigInteger Gres[][] = GaussianPro(packed);
        //System.out.println("Grs:");
        //showPro(Gres);
        BigInteger thresPro = getThresholdPro(pp.encrypt(new BigInteger("222")), copyMatrix(Gres), new BigInteger("16"), pp.encrypt(new BigInteger("2")));
        //System.out.println("Delta: " + 2 + " and thres Pro:");
        //System.out.println(pp.decrypt(thresPro));
        thresPro = pp.encrypt(new BigInteger("126"));
        BigInteger binResPro[][] = binarizationPro(thresPro, new BigInteger("16"), Gres);
        //System.out.println("bina:");
        //showPro(binResPro);
        //BigInteger sResPro[][] = sobelItPro(binResPro);
        //System.out.println("SobelRes:");
        //showPro(sResPro);
        //binResPro = binarizationPro(pp.encrypt(new BigInteger("254")), new BigInteger("2"), sResPro);
        //System.out.println("bina:");
        //showPro(binResPro);
        BigInteger sResPro[][] = sobelItProVersionII(binResPro);
        //System.out.println("SobelRes:");
        //showPro(sResPro);
        BigInteger binResProVersionII[][] = binarizationNor(pp.encrypt(new BigInteger("254")), sResPro);
        //System.out.println("bina:");
        //showPro(binResProVersionII);
        return binResProVersionII;
    }

    public static BigInteger[][] hybridSystemProDiv(int stp, int oH, int oW, int pieceH, int pieceW) throws Exception {
        //1000000, 32, 32, 16, 16
        BigInteger img[][] = initialImgPro(stp, oH, oW, pieceH, pieceW);
        //System.out.println("ooorigin matrix:");
        //showPro(img);
        BigInteger packed[][] = packTheImgPro(img);
        //System.out.println("origin matrix:");
        //showPro(packed);
        BigInteger Gres[][] = GaussianProDiv(packed);
        //System.out.println("Grs:");
        //showPro(Gres);
        BigInteger thresPro = getThresholdProDiv(pp.encrypt(new BigInteger("222")), copyMatrix(Gres), new BigInteger("16"), pp.encrypt(new BigInteger("2")));
        //System.out.println("Delta: " + 2 + " and thres Pro:");
        //System.out.println(pp.decrypt(thresPro));
        thresPro = pp.encrypt(new BigInteger("126"));
        BigInteger binResPro[][] = binarizationPro(thresPro, new BigInteger("16"), Gres);
        //System.out.println("bina:");
        //showPro(binResPro);
        BigInteger sResPro[][] = sobelItProVersionIIDiv(binResPro);
        //System.out.println("SobelRes:");
        //showPro(sResPro);
        BigInteger binResProVersionII[][] = binarizationNor(pp.encrypt(new BigInteger("254")), sResPro);
        //System.out.println("bina:");
        //showPro(binResProVersionII);
        return binResProVersionII;
    }

    public static BigInteger[][] hybridSystemNor(int oH, int oW) throws Exception {
        //32 32
        BigInteger imgN[][] = initialImgNor(oH, oW);
        //System.out.println("origin matrix:");
        //showInFormatPro(imgN);
        BigInteger GresN[][] = GaussianNor(imgN);
        //System.out.println("Grs:");
        //showInFormatPro(GresN);
        BigInteger thresN = getThresholdNor(pp.encrypt(new BigInteger("230")), copyMatrix(GresN), pp.encrypt(new BigInteger("2")));
        //System.out.println("Delta: " + 2 + " and thres Pro:");
        //System.out.println(pp.decrypt(thresN));
        BigInteger binResNor[][] = binarizationNor(thresN, GresN);
        //System.out.println("bina:");
        //showInFormatPro(binResNor);
        BigInteger sResNor[][] = sobelItNor(binResNor);
        //System.out.println("SobelRes:");
        //showInFormatPro(sResNor);
        binResNor = binarizationNor(pp.encrypt(new BigInteger("254")), sResNor);
        //System.out.println("bina:");
        //showInFormatPro(binResNor);
        return binResNor;
    }

    public static void main(String[] args) throws Exception {
        ksize = 128;
        hybridSystemNor(32, 32);
        endTime = System.currentTimeMillis(); //获取结束时间
        System.out.println("非打包程序运行时间： "+(endTime-startTime)+"ms");
        hybridSystemPro(1000000, 32, 32, 16, 16);
        endTime = System.currentTimeMillis(); //获取结束时间
        System.out.println("打包非并行程序运行时间： "+(endTime-startTime)+"ms");
        hybridSystemProDiv(1000000, 32, 32, 16, 16);
        endTime = System.currentTimeMillis(); //获取结束时间
        System.out.println("打包并行程序运行时间： "+(endTime-startTime)+"ms");
    }

}
